<html>
  <head>
    {% if is_exe == True %}
      <title>WebDeck</title>
    {% else %}
      <title>WebDeck DEV</title>
    {% endif %}

    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <link rel="stylesheet" href="static/files/loading-squares.css">
    {% for file in config['front']['themes'][::-1] %}
      {% if not file.startswith('//') %}
        <link rel="stylesheet" href="static/themes/{{ file }}">
      {% endif %}
    {% endfor %}
    <link rel="icon" href="static\files\icon.ico"/>
    <meta name="viewport" content="width=device-width, user-scalable=no">
    <meta charset="UTF-8">


    <style>
      label, input { display:block; }
      input.text { margin-bottom:12px; width:95%; padding: .4em; }
      fieldset { padding:0; border:0; margin-top:25px; }
      h1 { font-size: 1.2em; margin: .6em 0; }
      div#users-contain { width: 350px; margin: 20px 0; }
      div#users-contain table { margin: 1em 0; border-collapse: collapse; width: 100%; }
      div#users-contain table td, div#users-contain table th { border: 1px solid #eee; padding: .6em 10px; text-align: left; }
      .ui-dialog .ui-state-error { padding: .3em; }
      .validateTips { border: 1px solid transparent; padding: 0.3em; }
    </style>


    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.js"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script>

    <script src="/static/files/color-setting.js"></script>
    <script src="/static/files/themes-setting.js"></script>
    <script src="/static/files/background-setting.js"></script>
    <script src="/static/files/filepath.js"></script>
    <script src="/static/files/folderpath.js"></script>
    <script src="/static/files/loadingscreen.js"></script>
    <script src="/static/files/upload_file.js"></script>
    {# <script src="/static/files/buttonclick.js"></script> #}

    {% set language = text['lang_short'] %}

    {% set black_theme = '' %}
    {% if config['front']['black-theme'] == 'true' %}
      {% set black_theme = ' black-theme' %}
    {% endif %}

    {# {% set total_boxes = int(config["front"]["width"]) * int(config["front"]["height"]) %}
    {% for folder_id, value in config["front"]["buttons"].items() %}

      {% for _ in range(total_boxes) %}
        {% if config["front"]["buttons"][folder_id]|length < total_boxes %}
          {% set config = config["front"]["buttons"][folder_id].append({"VOID": "VOID"}) %}
    
        {% endif %}
      {% endfor %}
      
    {% endfor %} #}

  </head>
  <body>
    <div id="loading-screen">
      <div>
        <p id="server-disconnected" class="invisible">
          {{text['server_disconnected']}}...
        </p>

        <div class="loadingspinner">
          <div id="square1"></div>
          <div id="square2"></div>
          <div id="square3"></div>
          <div id="square4"></div>
          <div id="square5"></div>
        </div>
      </div>

      <div class="invisible">
        {% for svg in svgs %}
          <img src="{{svg}}"> 
        {% endfor %}
      </div>
    </div>

    {% if random_bg.endswith(".mp4") %}
      <div class="background-video">
        <video autoplay muted loop class="background-video">
          <source src="{{ 'static/files/uploaded/' + random_bg.replace('//','').replace('**uploaded/', '') }}" type="video/mp4">
          Your browser does not support the video tag...
        </video>
      </div>
    {% endif %}


    {% if config["settings"]["show-console"].lower() == "true" %}
      <form class="form">
        <label style="color: white;">Console:</label><br>
        <input type="text" class="message {{black_theme}}"><br>
        <button type="submit">Submit</button>
      </form>
    {% endif %}

    <style>
      
      {% if random_bg and not random_bg.strip() == "" %}
        {% if random_bg.endswith('.mp4') %}
          body, div.fakeform-container {
            background-color: #00000000;
            background-image: none;
          }
        {% elif '**uploaded/' in random_bg.lower() %}
          body, div.fakeform-container {
            background-color: transparent;
          }
          html::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;

            background-image: url("{{ "static/files/uploaded/" + random_bg.replace('**uploaded/', '') }}")!important;
            background-size: cover;
            background-position: center;
            background-color: transparent;
            background-position: center;
            z-index: -1;
          }
          div.fakeform-container {
            background-image: url("{{ "static/files/uploaded/" + random_bg.replace('**uploaded/', '') }}")!important;
            background-color: transparent;
          }
          @media (orientation: portrait) {
            html::before {
              {% set extension = random_bg.replace('**uploaded/', '').split('.')[-1] %}
              {% set bg_image = "static/files/uploaded/" + random_bg.replace('**uploaded/', '').replace('.'+extension, '-90.'+extension) %}
              background-image: url("{{ bg_image }}")!important;
            }
          }
        {% else %}
          body, div.fakeform-container {
            background-color: {{random_bg}};
            background-image: none;
          }

          :root {
            --bg-color: {{random_bg}};
          }
        {% endif %}
      {% endif %}

      @media (orientation: portrait) {
        div.buttons-center {
          transform: rotate({{portrait_rotate}}deg);
        }
        div.all-buttons {
          width: max-content;
        }
      }

      {% if config['front']['buttons-color'] != "" and config['front']['edit-buttons-color'] != "false" %}
        .wd_button, .wd_button:focus {
          background-color: {{config['front']['buttons-color']}};
          box-shadow: {{config['front']['buttons-color']}} 0 1px 3px 0;
        }
        .wd_button:hover {
          transform: translateY(-1px);
          animation-name: animation-{{ config['front']['buttons-color'].replace('#','') }};
          animation-duration: 1s;
        } 
        .wd_button:active {
          background-color: #{{ config['front']['buttons-color'].replace('#','') }};
          border-color: rgba(0, 0, 0, 0.15);
          box-shadow: rgba(0, 0, 0, 0.06) 0 2px 4px;
          color: rgba(0, 0, 0, 0.65);
          transform: translateY(0);
        }
      {% endif %}
      
      {% for folder_id, value in config["front"]["buttons"].items() %}
        {% for button_config in config["front"]["buttons"][folder_id] %}
          {% if 'background-color' in button_config.keys() %}
            @keyframes animation-{{ button_config['background-color'].replace('#','') }} {
              100% {background-color: #{{ button_config['background-color'].replace('#','') }};}
              100% {background-color: none;}
            }
            .button-{{ button_config['background-color'].replace('#','') }}, .button-{{ button_config['background-color'].replace('#','') }}:focus {
              background-color: #{{ button_config['background-color'].replace('#','') }};
              box-shadow: #{{ button_config['background-color'].replace('#','') }} 0 1px 3px 0;
              color: rgba(0, 0, 0, 0.85) !important;
            }
            .button-{{ button_config['background-color'].replace('#','') }}:hover {
              transform: translateY(-1px);
              animation-name: animation-{{ button_config['background-color'].replace('#','') }};
              animation-duration: 1s;
            } 
            .button-{{ button_config['background-color'].replace('#','') }}:active {
              background-color: #{{ button_config['background-color'].replace('#','') }};
              background: #{{ button_config['background-color'].replace('#','') }};
              border-color: rgba(0, 0, 0, 0.15);
              box-shadow: rgba(0, 0, 0, 0.06) 0 2px 4px;
              color: rgba(0, 0, 0, 0.65);
              transform: translateY(0);
            }
          {% endif %}
        {% endfor %}
      {% endfor %}
    </style>

    <div id="EditorButtons-Folders" style="color: white; display: none; position: fixed; top: 0; left: 0;">
      {{text['open_folder']}}: 
      {% for folder_id, value in config["front"]["buttons"].items() %}
        {% set folder_id = folder_id.replace('"', '&quot;') %}
        <button class="button EditorButtons-Folder" onclick="folder(`{{ folder_id }}`)">
          {{ folder_id }}
        </button>
      {% endfor %}
    </div>

    {% for folder_id, value in config["front"]["buttons"].items() %}
      <div id="folder-{{ folder_id }}" class="buttons-center invisible">
        <div id="folder-{{ folder_id }}" class="all-buttons">
          {% set edit_modal_ID1 = loop.index0 %}
          {% for button_config in config["front"]["buttons"][folder_id] %}
            {% set edit_modal_ID = "e" + str(edit_modal_ID1) + "X" + str(loop.index0) %}
            {% set button_id = loop.index0 %}
            {% set onclick = 'type=submit' %}

            {% if 'VOID' in button_config or button_config == {} %}
              <div class="void form-{{ button_id }}" id="{{edit_modal_ID}}">
                <div class="checkbox" style="display: none;"></div>
                <div class="add-button" add_FOLDER="{{ folder_id }}" add_ID="{{ button_id }}" style="display: none; top: 40.3675;">
                  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24">
                    <path d="M12 4v16m8-8H4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                  </svg>
                </div>
              </div>
            {% else %}
            
              <form class="form-{{ button_id }} form" id="{{edit_modal_ID}}">
                <div class="container-editmode">
                  <div class="edit-button" style="display: none;" edit_modal_ID="{{ edit_modal_ID }}">
                    <svg width="16px" height="16px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="Edit / Edit_Pencil_01">
                      <path id="Vector" d="M12 8.00012L4 16.0001V20.0001L8 20.0001L16 12.0001M12 8.00012L14.8686 5.13146L14.8704 5.12976C15.2652 4.73488 15.463 4.53709 15.691 4.46301C15.8919 4.39775 16.1082 4.39775 16.3091 4.46301C16.5369 4.53704 16.7345 4.7346 17.1288 5.12892L18.8686 6.86872C19.2646 7.26474 19.4627 7.46284 19.5369 7.69117C19.6022 7.89201 19.6021 8.10835 19.5369 8.3092C19.4628 8.53736 19.265 8.73516 18.8695 9.13061L18.8686 9.13146L16 12.0001M12 8.00012L16 12.0001" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></g>
                    </svg>
                  </div>
                  <div class="delete-button" style="display: none;">
                    <svg fill="#000000" width="16px" height="16px" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
                        <path d="M18.8,16l5.5-5.5c0.8-0.8,0.8-2,0-2.8l0,0C24,7.3,23.5,7,23,7c-0.5,0-1,0.2-1.4,0.6L16,13.2l-5.5-5.5  c-0.8-0.8-2.1-0.8-2.8,0C7.3,8,7,8.5,7,9.1s0.2,1,0.6,1.4l5.5,5.5l-5.5,5.5C7.3,21.9,7,22.4,7,23c0,0.5,0.2,1,0.6,1.4  C8,24.8,8.5,25,9,25c0.5,0,1-0.2,1.4-0.6l5.5-5.5l5.5,5.5c0.8,0.8,2.1,0.8,2.8,0c0.8-0.8,0.8-2.1,0-2.8L18.8,16z"/>
                    </svg>
                  </div>
                </div>

                
                <input type="hidden" class="message {{black_theme}}" value="{{ button_config['message'].replace('"','&quot;')  }}">
                <div class="checkbox" style="display: none;"></div>
                
                {% set class = "wd_button" %}
                {% if 'background-color' in config["front"]["buttons"][folder_id][button_id].keys() %}
                  {% set class = class + ' button-'+button_config['background-color'].replace('#','') %}
                {% endif %}

                {% if config["front"]["buttons"][folder_id][button_id]["message"] %}
                  {% if config["front"]["buttons"][folder_id][button_id]["message"].strip() == '/fullscreen' %}
                    {% set class = class + " fullscreen-btn" %}
                  {% endif %}
                  {% if config["front"]["buttons"][folder_id][button_id]["message"].strip() == '/zoom in' %}
                    {% set class = class + " zoom-in-btn" %}
                  {% endif %}
                  {% if config["front"]["buttons"][folder_id][button_id]["message"].strip() == '/zoom out' %}
                    {% set class = class + " zoom-out-btn" %}
                    {% endif %}
                  {% if config["front"]["buttons"][folder_id][button_id]["message"].strip() == '/buttons-div expand' %}
                    {% set class = class + " expand-btn" %}
                    {% endif %}
                  {% if config["front"]["buttons"][folder_id][button_id]["message"].strip() == '/buttons-div shrink' %}
                    {% set class = class + " shrink-btn" %}
                  {% endif %}
                  {% if config["front"]["buttons"][folder_id][button_id]["message"].strip() == '/box-zoom-out' %}
                    {% set class = class + " box-zoom-out" %}
                  {% endif %}
                  {% if config["front"]["buttons"][folder_id][button_id]["message"].strip() == '/box-zoom-in' %}
                    {% set class = class + " box-zoom-in" %}
                  {% endif %}
                  {% if config["front"]["buttons"][folder_id][button_id]["message"].strip() == '/page-dezoom' %}
                    {% set class = class + " dezoom-btn" %}
                  {% endif %}
                  {% if config["front"]["buttons"][folder_id][button_id]["message"].strip() == '/page-zoom' %}
                    {% set class = class + " zoom-btn" %}
                  {% endif %}
                  {% if config["front"]["buttons"][folder_id][button_id]["message"].strip() == '/open-modal' %}
                    {% set class = class + " open-config-modal" %}
                  {% endif %}
                  {% if config["front"]["buttons"][folder_id][button_id]["message"].strip() == '/open-config' %}
                    {% set class = class + " open-config-modal" %}
                  {% endif %}
                  {% if config["front"]["buttons"][folder_id][button_id]["message"].strip() == '/open-config-modal' %}
                    {% set class = class + " open-config-modal" %}
                  {% endif %}
                {% endif %}

                {% if button_config["message"] and button_config["message"].startswith("/folder") %}
                  {% set onclick = "onclick=\"folder(`" + button_config['message'].replace('/folder ', '').replace('"','') + "`)\" onclickhandler=\"folder(`" + button_config['message'].replace('/folder ', '').replace('"','') + "`)\"" %}
                  <div class="swapMode-open-folder" {{ onclick }} style="display: none;">
                    {{text['open_folder']}}
                  </div>
                {% endif %}

                {% set fill = '' %}
                  {% if 'color' in config["front"]["buttons"][folder_id][button_id].keys() %}
                    {% if config["front"]["buttons"][folder_id][button_id]["color"] == 'invert' %}
                      {% set fill = 'filter: invert(1)' %}
                    {% else %}
                      {% set fill = 'fill:'+ config["front"]["buttons"][folder_id][button_id]["color"] +';'+' color:'+ config["front"]["buttons"][folder_id][button_id]["color"] +';' %}
                    {% endif %}
                  {% endif %}
                {% if config["front"]["buttons"][folder_id][button_id]["image"] == "" or not config["front"]["buttons"][folder_id][button_id]["image"] %}
                
                  <button {{ onclick }} id="button_{{edit_modal_ID}}" edit_modal_ID="{{ edit_modal_ID }}" class="{{class}}" role="button" style="overflow: hidden; max-height: 89.6px;">
                    <!--|||||||||||||||||||||||-->
                    {% if button_config['message'].startswith('/usage') %}
                      {% set name = button_config['message'].replace('<|§|>','').replace("'",'"',2).split('"')[1].strip() %}
                      {% set path = button_config['message'].replace('<|§|>','').replace("'",'"',2).split('"')[2] %}
                      {% if button_config['message'].split()[1] %}
                        <div class="usage">
                          <div class="usage-title {{ path.replace("'",'"').replace('"]["','.').replace('"]','').replace('["','.') }}" style="{{fill}}">
                            {{ name }}
                          </div>
                          <div class="usage-value {{ path.replace("'",'"').replace('"]["','.').replace('"]','').replace('["','.') }}" style="{{fill}}">
                            -
                          </div>
                        </div>
                      {% endif %}
                    {% endif %}
                    <!--|||||||||||||||||||||||-->
                  </button>
                {% else %}
                  {% if config["front"]["buttons"][folder_id][button_id]["image"].startswith('http') %}
                    {% set imagepath = config["front"]["buttons"][folder_id][button_id]["image"] %}
                  {% elif ':' in config["front"]["buttons"][folder_id][button_id]["image"] %}
                    {% set imagepath = "static/files/images/" + config["front"]["buttons"][folder_id][button_id]["image"].split('\\')[-1] %}
                  {% elif config["front"]["buttons"][folder_id][button_id]["image"].startswith('**uploaded/') %}
                    {% set imagepath = "static/files/uploaded/" + config["front"]["buttons"][folder_id][button_id]["image"].replace('**uploaded/','') %}
                  {% else %}
                    {% set imagepath = "static/files/images/" + config["front"]["buttons"][folder_id][button_id]["image"] %}
                  {% endif %}
                  
                  <button {{ onclick }} id="button_{{edit_modal_ID}}" edit_modal_ID="{{ edit_modal_ID }}" class="{{class}}" role="button" style="overflow: hidden; max-height: 89.6px;">
                    {% set image_size = '70%' %}
                    {% if config["front"]["buttons"][folder_id][button_id]["image_size"] %}
                      {% set image_size = config["front"]["buttons"][folder_id][button_id]["image_size"] %}
                    {% endif %}
                    {% if isfile(imagepath) %}
                      {% if imagepath.endswith('.svg') %}
                        {{ open(imagepath).read().replace('<svg ','<svg style="width:' + str(112*(int(image_size.replace("%", "")) /100) + 3) + 'px; height:'  + str(112*(int(image_size.replace("%", "")) /100) + 3) + '; ' + fill + '" ') }}
                      {% else %}
                        <img src="{{ imagepath }}" draggable="false" alt="{{ imagepath }}" style="
                          width: {{ 112 * (int(image_size.replace("%", "")) / 100) + 3 }}px;
                          {{fill}}"
                        >
                      {% endif %}
                    {% endif %}
                    
                    <!--|||||||||||||||||||||||-->
                    {% if button_config['message'] and button_config['message'].startswith('/usage') %}
                      {% set name = button_config['message'].replace('<|§|>','').replace("'",'"',2).split('"')[1].strip() %}
                      {% set path = button_config['message'].replace('<|§|>','').replace("'",'"',2).split('"')[2] %}
                      {% if button_config['message'].split()[1] %}
                        <div class="usage">
                          <div class="usage-title {{ path.replace("'",'"').replace('"]["','.').replace('"]','').replace('["','.') }}" style="{{fill}}">
                            {{ name }}
                          </div>
                          <div class="usage-value {{ path.replace("'",'"').replace('"]["','.').replace('"]','').replace('["','.') }}" style="{{fill}}">
                            -
                          </div>
                        </div>
                      {% endif %}
                    {% endif %}
                    <!--|||||||||||||||||||||||-->
                  </button>
                {% endif %}
                {% if config["front"]["show-names"].lower() == "true" %}
                  {% set buttontext_style = ''%}
                  {% if config["front"]["names-color"] and not config["front"]["names-color"].strip() == "" %}
                    {% set buttontext_style = 'style="color:'+config["front"]["names-color"]+';"'%}
                  {% endif %}
                  <p class="buttontext" {{buttontext_style}}>
                    {{ button_config['name'] }}
                  </p>
                {% endif %}
                
              </form>

              {% if button_config["message"] %}
                {% set button_command = config["front"]["buttons"][folder_id][button_id]["message"].strip() %}
              {% else %}
                {% set button_command = '' %}
              {% endif %}
              {% set button_settings = config["front"]["buttons"][folder_id][button_id] %}

              {% for category, commands_name in commands.items() if command_value == None %}
                {% for command_name, command in commands_name.items() if command_value == None %}
                  {% if command['command'] %}
                    {% if button_command.lower().split()[0].strip() == command['command'].lower().strip() %}
                      {% set command_value = command %}
                      {% include 'editbutton_modal.jinja' %}
                    {% endif %}
                  {% endif %}
                {% endfor %}
              {% endfor %}

              {% if command_value is not defined %}
                {% set command_value = button_settings %}
                {% include 'editbutton_modal.jinja' %}
              {% endif %}
            
              
            {% endif %}
          {% endfor %}
        </div>
      </div>
    {% endfor %}


    <div id="EditorButtons" style="display: none;">
      <button class="button" id="SaveExitEditorButton">
        <img src="static/files/images/save.svg" width="20" height="20" id="EditorButtonLogo"> <!-- https://feathericons.com/?query=save -->
        [E] {{text['save_and_exit']}}
      </button>
      <button class="button" id="exitEditorButton"> [Q] {{text['quit_without_saving']}} </button>
      
      <button class="button" id="swapEditorButton">
        <img src="static/files/images/swap.png" width="20" height="20" id="EditorButtonLogo">
        [S] {{text['swap_buttons']}}
      </button>
    </div>


    <div class="modal-container {{black_theme}}" id="modal-container">
      <div class="modal-content {{black_theme}}">

        <div class="modal-header bold">
          <h1 class="config-modal"> {{text['configuration']}} </h1>
          <div class="modal-close">
            <svg class="config-modal {{black_theme}}" xmlns="http://www.w3.org/2000/svg" width="19" height="19" fill="currentColor" class="bi bi-x-circle-fill" viewBox="0 0 16 16">
              <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z"/>
            </svg>
          </div>
        </div>
        <div style="display: flex; flex-direction: column;">
          <a class="{{black_theme}}" id="version" href="https://github.com/Lenochxd/WebDeck/releases/tag/v{{versions['versions'][0]['version']}}" target="_blank" title="{{text['see_patchnotes']}}" alt="{{text['see_patchnotes']}}">
            v{{versions['versions'][0]['version']}}
          </a>
          <a class="{{black_theme}}" id="version" href="https://github.com/Lenochxd/WebDeck/issues/new/choose" target="_blank" alt="{{text['github_issue']}}" style="margin-top: -4px;">
            {{text['github_issue']}}
          </a>
        </div>

        <div class="modal-main">
          <div class="config-container choose-themes {{black_theme}}" id="choose-themes" style="display: none;">
            <
            <button type="button" id="setting-themes-back" class="button {{black_theme}}">
              {{text['back']}}
            </button>

            <div id="themes-tutorial-container">
              <a href="{{text['link_themes']}}" target="_blank" title="{{text['themes_tutorial']}}">
                  <!-- source: https://phosphoricons.com/ -->
                  {{ open("static/files/images/info.svg").read().replace('<svg ','<svg class="info-icon' + black_theme + '" ')  }}
              </a>

              <button type="button" onclick="send_data('/openfolder /static/themes')" class="button" id="open-themes-folder">
                {{text['open_themes_folder']}}
              </button>
            </div>

            <h1 class="config-title"> {{text['themes_menu_title']}} </h1>
            
            <div class="editorStyle-bar {{black_theme}}"></div>

            <div id="choose-themes-titles">
              <h2 class="disabled-themes-title"> {{text['disabled_themes']}} </h2>
              <h2 class="enabled-themes-title"> {{text['enabled_themes']}} </h2>
            </div>
            
            <div id="choose-themes-container">

              <div id="disabled-themes">
                {% for theme in config["front"]["themes"] %}
                  {% if theme.startswith("//") %}
                    <div class="theme-container" filename="{{ theme }}">
                      {% set theme = theme.replace('//', '') %}
                      <span class="enable-theme-hitbox"></span>
                      <span class="enable-theme invisible"></span>

                      <div class="arrows-container invisible">
                        <span class="arrow-up-hitbox"></span>
                        <span class="arrow-up"></span>
                        <span class="arrow-down-hitbox"></span>
                        <span class="arrow-down"></span>
                      </div>
                      <div class="theme-icon-container">
                        {% if not parsed_themes[theme]['theme-logo'] == "" %}
                          <img class="theme-icon" src="{{parsed_themes[theme]['theme-logo']}}"/>
                        {% endif %}
                      </div>

                      <div class="theme-texts">
                        <div class="theme-title">
                          {{parsed_themes[theme]["theme-name"]}}
                        </div>
                        <div class="theme-desc">
                          {{parsed_themes[theme]["theme-description"]}}
                        </div>
                      </div>
                    </div>
                  {% endif %}
                {% endfor %}
              </div>

              <div id="enabled-themes">
                {% for theme in config["front"]["themes"] %}
                  {% if not theme.startswith("//") %}
                    {% set isdefault = "" %}
                    {% if theme == default_theme %}
                      {% set isdefault = "defaulttheme" %}
                    {% endif %}
                    <div class="theme-container" filename="{{ theme }}" {{isdefault}}>
                      {% if theme != default_theme %}
                        <span class="disable-theme-hitbox"></span>
                        <span class="disable-theme invisible"></span>

                        <div class="arrows-container invisible">
                          <span class="arrow-up-hitbox"></span>
                          <span class="arrow-up"></span>
                          <span class="arrow-down-hitbox"></span>
                          <span class="arrow-down"></span>
                        </div>
                      {% endif %}
                      <div class="theme-icon-container">
                        {% if not parsed_themes[theme]['theme-logo'] == "" %}
                          <img class="theme-icon" src="{{parsed_themes[theme]['theme-logo']}}"/>
                        {% endif %}
                      </div>
                      <div class="theme-texts">
                        <div class="theme-title">
                          {{parsed_themes[theme]["theme-name"]}}
                        </div>
                        <div class="theme-desc">
                          {{parsed_themes[theme]["theme-description"]}}
                        </div>
                      </div>
                    </div>
                  {% endif %}
                {% endfor %}
              </div>

            </div>
          </div>

          <div class="config-container choose-background {{black_theme}}" id="choose-background" style="display: none;">
            <
            <button type="button" id="setting-background-back" class="button {{black_theme}}">
              {{text['back']}}
            </button>
            <h1 class="config-title"> {{text['random_bg_menu_title']}} </h1>
            <div class="background-color-input-container">
              <input type="color" class="background-color-input {{black_theme}}" id="background-color-input">
              <input type="text" id="background-color-hex" class="background-color-setting {{black_theme}}" placeholder="{{text['wallpaper_color']}} (HEX)">
            </div>

            <div id="create-bg-choices">
              <button class="{{black_theme}}" id="create-color-bg"> {{text['add_background_color']}} </button>
              {{text['or']}}
              <input type="file" id="create-image-bg" class="{{black_theme}}" accept="image/jpeg, image/png, image/gif, video/mp4">
            </div>
            
            <div class="editorStyle-bar {{black_theme}}"></div>

            <div id="choose-backgrounds-container">

              {% for bg in config["front"]["background"] %}
                {% if bg.replace('//','').startswith('rgb(') or bg.replace('//','').startswith('#') %}
                  <div class="choose-bg-element choose-bg-element-color choose-bg-element-pageload {{black_theme}}"
                    background="{{bg}}"
                    background_color_text="{{text['background_color']}}"
                    style="background-color: {{bg.replace('//','')}};"
                  >
                    {{text['background_color']}} : {{bg.replace('//','')}}
                    <div class="choose-bg-buttons">

                      {% if bg.startswith('//') %}
                        <div class="choose-bg-activate-button"></div>
                      {% else %}
                        <div class="choose-bg-activate-button choose-bg-activate-button-checked"></div>
                      {% endif %}

                      <svg class="choose-bg-delete-button" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                        <title> {{text['remove_background']}} </title>
                        <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5Zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5Zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6Z"></path>
                        <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1ZM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118ZM2.5 3h11V2h-11v1Z"></path>
                      </svg>
                    </div>
                  </div>
                {% elif bg.endswith(".mp4") %}
                  <div class="choose-bg-element choose-bg-element-image" background="{{bg}}">

                    <div class="video-container choose-bg-pseudo-element">
                      <video autoplay muted loop class="blurred-video">
                        <source src="{{ 'static/files/uploaded/' + bg.replace('//','').replace('**uploaded/', '') }}" type="video/mp4">
                        Your browser does not support the video tag...
                      </video>
                    </div>


                    <div class="video-container">
                      <video autoplay muted loop>
                        <source src="{{ 'static/files/uploaded/' + bg.replace('//','').replace('**uploaded/', '') }}" type="video/mp4">
                        Your browser does not support the video tag...
                      </video>
                    </div>
                    {# <img src="{{ 'static/files/uploaded/' + bg.replace('//','').replace('**uploaded/', '') }}"> #}
                    <div class="choose-bg-buttons">
                      {% if bg.startswith('//') %}
                        <div class="choose-bg-activate-button"></div>
                      {% else %}
                        <div class="choose-bg-activate-button choose-bg-activate-button-checked"></div>
                      {% endif %}
                    
                      <svg class="choose-bg-delete-button" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                        <title> {{text['remove_background']}} </title>
                        <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5Zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5Zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6Z"></path>
                        <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1ZM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118ZM2.5 3h11V2h-11v1Z"></path>
                      </svg>
                    </div>
                  </div>
                {% else %}
                  <div class="choose-bg-element choose-bg-element-image" background="{{bg}}">
                    <div class="choose-bg-pseudo-element" style='background-image: url("{{ 'static/files/uploaded/' + bg.replace('//','').replace('**uploaded/', '').replace("'", '&#39;') }}")'></div>
                    <img src="{{ 'static/files/uploaded/' + bg.replace('//','').replace('**uploaded/', '') }}">
                    <div class="choose-bg-buttons">
                      {% if bg.startswith('//') %}
                        <div class="choose-bg-activate-button"></div>
                      {% else %}
                        <div class="choose-bg-activate-button choose-bg-activate-button-checked"></div>
                      {% endif %}
                    
                      <svg class="choose-bg-delete-button" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                        <title> {{text['remove_background']}} </title>
                        <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5Zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5Zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6Z"></path>
                        <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1ZM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118ZM2.5 3h11V2h-11v1Z"></path>
                      </svg>
                    </div>
                  </div>
                {% endif %}
              {% endfor %}
            </div>
          </div>

          <div class="config-container {{black_theme}}" id="config-container" style="display: block;">
            <button class="button modal-button" id="editorButton"> [Q] {{text['enter_editor_mode']}} </button>
            <form id="config-form" class="config-form">
              <div class="setting-category settings {{black_theme}}">
                <h1 class="config-title"> {{text['settings']}} </h1>

                <div class="setting language">
                  <label for="language"> {{text['language']}} </label>
                  <select id="language" name="settings.language">
                    {% for lang in langs %}
                      <option value="{{lang}}" {% if config['settings']['language'].lower() == lang.lower() %}selected{% endif %}>{{lang}}</option>
                    {% endfor %}
                  </select>
                </div>

                {% if is_exe == True %}
                  <div class="setting windows-startup">
                    <p> {{text['config-windows_startup']}} </p>
                    <label for="windows-startup" class="switch">
                      {% if 'windows-startup' in config['settings'].keys() %}
                        <input class="{{black_theme}}" type="checkbox" id="windows-startup" name="settings.windows-startup" {% if config['settings']['windows-startup'].lower() == 'true'%}checked{% endif %}>
                      {% else %}
                        <input class="{{black_theme}}" type="checkbox" id="windows-startup" name="settings.windows-startup" checked>
                      {% endif %}
                      <span class="slider round"></span>
                    </label>
                  </div>

                  <div class="setting auto-updates">
                    <p> {{text['auto_updates']}} </p>
                    <label for="auto-updates" class="switch">
                      {% if 'auto-updates' in config['settings'].keys() %}
                        <input class="{{black_theme}}" type="checkbox" id="auto-updates" name="settings.auto-updates" {% if config['settings']['auto-updates'].lower() == 'true'%}checked{% endif %}>
                      {% else %}
                        <input class="{{black_theme}}" type="checkbox" id="auto-updates" name="settings.auto-updates" checked>
                      {% endif %}
                      <span class="slider round"></span>
                    </label>
                  </div>
                {% endif %}
                
                <div class="setting soundboard {{black_theme}}">
                  <div class="settings-title-info">
                    <label for="soundboard" style="margin-top: 3px;"> {{text['soundboard']}} </label>
                    <a href="{{text['link_soundboard']}}" target="_blank"  title="{{text['soundboard_tutorial']}}">
                        <!-- source: https://phosphoricons.com/ -->
                        {{ open("static/files/images/info.svg").read().replace('<svg ','<svg class="info-icon' + black_theme + '" ')  }}
                    </a>
                  </div>


                  <div class="setting mic_input_device">
                    <label for="mic_input_device"> {{text['input_device']}} </label>
                    <select id="mic_input_device" name="settings.soundboard.mic_input_device">
                      {% set audio_devices = select_audio_device() %}
                      {% for device in audio_devices %}
                        {% set mic_input_device = config['settings']['soundboard']['mic_input_device'] %}
                        {% if not device.endswith(')') and '(' in device %}
                          {% set device = device + "..." %}
                        {% endif %}
                        <option value="{{device.replace('...','')}}" {% if mic_input_device[mic_input_device.find("(") + 1:].lower() in device.lower() %}selected{% endif %}>
                          {{device}}
                        </option>
                      {% endfor %}
                    </select>
                  </div>
                    
                  <div class="setting mic_output_device">
                    <label for="mic_output_device"> {{text['output_device']}} </label>
                    <select id="mic_output_device" name="settings.soundboard.vbcable">
                      {% set audio_devices = select_audio_device('output') %}
                      {% for device in audio_devices %}
                        {% set mic_output_device = config['settings']['soundboard']['vbcable'] %}
                        {% if not device.endswith(')') and '(' in device %}
                          {% set device = device + "..." %}
                        {% endif %}
                        <option value="{{device.replace('...','')}}" {% if mic_output_device[mic_output_device.find("(") + 1:].lower() in device.lower() %}selected{% endif %}>
                          {{device}}
                        </option>
                      {% endfor %}
                    </select>
                  </div>

                  <div class="setting ear-soundboard">
                    <p> {{text['ear_soundboard']}} </p>
                    <label for="ear-soundboard" class="switch">
                      <input class="{{black_theme}}" type="checkbox" id="ear-soundboard" name="settings.ear-soundboard" {% if config['settings']['ear-soundboard'].lower() == 'true'%}checked{% endif %}>
                      <span class="slider round"></span>
                    </label>
                  </div>
                  
                  <div class="setting toggle-soundboard">
                    <p> {{text['toggle_soundboard']}} </p>
                    <label for="toggle-soundboard" class="switch">
                      <input class="{{black_theme}}" type="checkbox" id="toggle-soundboard" name="settings.soundboard.enabled" {% if config['settings']['soundboard']['enabled'].lower() == 'true'%}checked{% endif %}>
                      <span class="slider round"></span>
                    </label>
                  </div>
                </div>

                <div class="setting spotify-api">
                  <div class="settings-title-info">
                    <label for="spotify" style="margin-top: 3px;"> {{text['spotify_api']}} </label>
                    <a href="{{text['link_spotify']}}" target="_blank" title="{{text['spotify_tutorial']}}">
                        <!-- source: https://phosphoricons.com/ -->
                        {{ open("static/files/images/info.svg").read().replace('<svg ','<svg class="info-icon' + black_theme + '" ')  }}
                    </a>
                  </div>

                  <ul>
                    <li>
                      <label for="spotify-USERNAME"> {{text['username']}} </label>
                      <input class="spotify-setting {{black_theme}}" type="text" class="spotify-setting" id="spotify-USERNAME" name="settings.spotify-api.USERNAME" {% if not config['settings']['spotify-api']['USERNAME'].strip() == ''%} value="{{config['settings']['spotify-api']['USERNAME']}}" {% endif %}>
                      
                      <label for="spotify-CLIENT_ID">Client ID</label>
                      <input class="spotify-setting {{black_theme}}" type="text" id="spotify-CLIENT_ID" name="settings.spotify-api.CLIENT_ID" {% if not config['settings']['spotify-api']['CLIENT_ID'].strip() == ''%} value="{{config['settings']['spotify-api']['CLIENT_ID']}}" {% endif %}>
                      
                      <label for="spotify-CLIENT_SECRET">Client Secret</label>
                      <div class="password-container">
                        <input class="spotify-setting {{black_theme}}" type="password" id="spotify-CLIENT_SECRET" name="settings.spotify-api.CLIENT_SECRET" {% if not config['settings']['spotify-api']['CLIENT_SECRET'].strip() == ''%} value="{{config['settings']['spotify-api']['CLIENT_SECRET']}}" {% endif %}>
                        <span id="show-password-spotify" class="show-password" onclick="togglePasswordVisibility('spotify-CLIENT_SECRET', 'show-password-spotify')"></span>
                      </div>
                    </li>
                  </ul>
                </div>

                <div class="setting obs-ws">
                  <div class="settings-title-info">
                    <label for="obs" style="margin-top: 3px;"> {{text['obs_studio']}} </label>
                    <a href="{{text['link_obs']}}" target="_blank" title="{{text['obs_tutorial']}}">
                        <!-- source: https://phosphoricons.com/ -->
                        {{ open("static/files/images/info.svg").read().replace('<svg ','<svg class="info-icon' + black_theme + '" ')  }}
                    </a>
                  </div>

                  <ul>
                    <li>
                      <label for="obs-HOST"> {{text['host']}} </label>
                      <input class="obs-setting {{black_theme}}" type="text" class="obs-setting" id="obs-HOST" name="settings.obs.host" {% if not config['settings']['obs']['host'].strip() == ''%} value="{{config['settings']['obs']['host']}}" {% endif %}>
                      
                      <label for="obs-PORT"> {{text['port']}} </label>
                      <input class="obs-setting {{black_theme}}" type="text" id="obs-PORT" name="settings.obs.port" {% if not config['settings']['obs']['port'] == '' %} value="{{config['settings']['obs']['port']}}" {% endif %}>
                      
                      <label for="obs-PASSWORD"> {{text['password']}} </label>
                      <div class="password-container">
                        <input class="obs-setting {{black_theme}}" type="password" id="obs-PASSWORD" name="settings.obs.password" {% if not config['settings']['obs']['password'].strip() == ''%} value="{{config['settings']['obs']['password']}}" {% endif %}>
                        <span id="show-password-obs" class="show-password" onclick="togglePasswordVisibility('obs-PASSWORD', 'show-password-obs')"></span>
                      </div>
                    </li>
                  </ul>
                </div>
                
              </div>
              
              <div class="setting-category visuals {{black_theme}}">
                <h1 class="config-title"> {{text['visuals']}} </h1>

                <div class="setting gridsize">
                  <p> {{text['gridsize']}} </p>
                  <div class="gridsize-container">
                    <div class="gridsize-height">
                      <label for="gridsize-height"> {{text['height']}} </label>
                      <input min="1" pattern="[0-9]*"
                        oninput="this.value = this.value.replace(/[^0-9]/g, '');"
                        class="{{black_theme}}" type="number" id="gridsize-height" name="front.height" {% if not config['front']['height'].strip() == ''%}value="{{config['front']['height']}}"{% endif %}>
                    </div>

                    <div class="gridsize-width">
                      <label for="gridsize-width"> {{text['width']}} </label>
                      <input min="1" pattern="[0-9]*"
                        oninput="this.value = this.value.replace(/[^0-9]/g, '');"
                        class="{{black_theme}}" type="number" id="gridsize-width" name="front.width" {% if not config['front']['width'].strip() == ''%}value="{{config['front']['width']}}"{% endif %}>
                    </div>
                  </div>
                </div>

                {# <div class="setting theme">
                  <label for="theme">Theme</label>
                  <select id="theme" name="front.theme">
                    {% for theme in themes %}
                      <option value="{{theme}}" {% if config['front']['theme'].lower() == theme %}selected{% endif %}>{{theme}}</option>
                    {% endfor %}
                  </select>
                </div> #}

                <div class="setting themes">
                  <label for="themes"> {{text['themes']}} </label>
                  <button type="button" id="setting-themes" class="{{black_theme}}">
                    {{text['open_theme_menu']}}
                  </button>
                  <input type="text" name="front.themes" id="choose-themes-handler" class="invisible" value="{{config['front']['themes']}}">
                </div>

                <div class="setting background">
                  <label for="background"> {{text['backgrounds']}} </label>
                  <button type="button" id="setting-background" class="{{black_theme}}">
                    {{text['open_background_image_menu']}}
                  </button>
                  {% set backgrounds = str(config['front']['background']).replace('",', "',").replace(', "', ", '").replace('["', "['").replace('"]', "']") %}
                  <input type="text" name="front.background" id="choose-background-handler" class="invisible" value="{{backgrounds}}">
                </div>

                <div class="setting {{black_theme}}">
                  <p> {{text['dark_theme']}} </p>
                  <label for="black-theme" class="switch">
                    <input class="{{black_theme}}" type="checkbox" id="black-theme" name="front.black-theme" {% if config['front']['black-theme'].lower() == 'true'%}checked{% endif %}>
                    <span class="slider round"></span>
                  </label>
                </div>
                
                <div class="setting portrait-rotate">
                  <label for="portrait-rotate"> {{text['portrait_rotate']}} </label>
                  <div id="portrait-rotate-setting-container">
                    <input required class="{{black_theme}}" type="number" min="0" pattern="[0-9]*"
                      style="width: 75px;"
                      oninput="this.value = this.value.replaceAll(/[^0-9]/g, '');"
                      id="portrait-rotate" name="front.portrait-rotate"
                      {% if not config['front']['portrait-rotate'].strip() == '' %}
                        value="{{ config['front']['portrait-rotate'] }}"
                      {% else %}
                        value="90"
                      {% endif %}
                    >
                    <div class="deg">&deg;</div>

                    <button type="button" onclick="document.getElementById('portrait-rotate').value = '270'" class="button">
                      270&deg;
                    </button>
                    <button type="button" onclick="document.getElementById('portrait-rotate').value = '90'" class="button">
                      90&deg;
                    </button>
                    <button type="button" onclick="document.getElementById('portrait-rotate').value = '0'" class="button">
                      0&deg;
                    </button>
                  </div>
                </div>
                
                <div class="setting show-names">
                  <p> {{text['show_btn_names']}} </p>
                  <label for="show-names"  class="switch">
                    <input class="{{black_theme}}" type="checkbox" id="show-names" name="front.show-names" {% if config['front']['show-names'].lower() == 'true'%}checked{% endif %}>
                    <span class="slider round"></span>
                  </label>
                  <div class="names-color-input-container">
                    {% set default_names_color = '' %}
                    {% if config['front']['names-color'] and not config['front']['names-color'].strip() == '' %}
                      {% if config['front']['names-color'].strip().startswith('#') %}
                        {% set default_names_color = 'value="' + config['front']['names-color'].strip() + '"' %}
                      {% else %}
                        {% set default_names_color = 'value="#' + config['front']['names-color'].strip() + '"' %}
                      {% endif %}
                    {% endif %}
                    <input type="color" class="names-color-input {{black_theme}}" id="names-color-input" {{default_names_color}}>
                    <input type="text" name="front.names-color" id="names-color-hex" class="names-color-setting {{black_theme}}" placeholder="Button names color (HEX)" {{default_names_color}}>
                  </div>

                </div>

                <div class="setting edit-buttons-color">
                  <p> {{text['edit_btn_color']}} </p>
                  <label for="edit-buttons-color"  class="switch">
                    <input class="{{black_theme}}" type="checkbox" id="edit-buttons-color" name="front.edit-buttons-color" {% if config['front']['edit-buttons-color'].lower() == 'true'%}checked{% endif %}>
                    <span class="slider round"></span>
                  </label>
                  <div class="buttons-color-input-container">
                    {% set default_buttons_color = '' %}
                    {% if config['front']['buttons-color'] and not config['front']['buttons-color'].strip() == '' %}
                      {% if config['front']['buttons-color'].strip().startswith('#') %}
                        {% set default_buttons_color = 'value="' + config['front']['buttons-color'].strip() + '"' %}
                      {% else %}
                        {% set default_buttons_color = 'value="#' + config['front']['buttons-color'].strip() + '"' %}
                      {% endif %}
                    {% endif %}
                    <input type="color" class="buttons-color-input {{black_theme}}" id="buttons-color-input" {{default_buttons_color}}>
                    <input type="text" name="front.buttons-color" id="buttons-color-hex" class="buttons-color-setting {{black_theme}}" placeholder="Button default color (HEX)" {{default_buttons_color}}>
                  </div>

                </div>
              </div>

              <div class="setting-category experimental {{black_theme}}">
                <h1 class="config-title"> {{text['experimental']}} </h1>
                
                
                <div class="setting usage-reload-time">
                  <label for="usage-reload-time"> {{text['usage_btn_reload_time']}} </label>
                  <input required class="{{black_theme}}" type="number" min="0" pattern="[0-9]*"
                    oninput="this.value = this.value.replaceAll(/[^0-9]/g, '');"
                    id="usage-reload-time" name="front.computer-usage-reload-time"
                    {% if not config['front']['computer-usage-reload-time'].strip() == '' %}
                      value="{{ config['front']['computer-usage-reload-time'] }}"
                    {% else %}
                      value="3000"
                    {% endif %}
                  >  
                </div>
                
                <div class="setting gpu_method">
                  <label for="gpu_method"> {{text['gpu_usage_method']}} </label>
                  <select id="gpu_method" name="settings.gpu_method">
                    <option value="nvidia (pynvml)" {% if config['settings']['gpu_method'].lower() == 'nvidia (pynvml)' %}selected{% endif %}>nvidia (pynvml)</option>
                    <option value="nvidia (GPUtil)" {% if config['settings']['gpu_method'].lower() == 'nvidia (gputil)' %}selected{% endif %}>nvidia (GPUtil)</option>
                    <option value="AMD" {% if config['settings']['gpu_method'].lower() == 'amd' %}selected{% endif %}>AMD ({{text['doesnt_work']}})</option>
                    <option value="Intel" {% if config['settings']['gpu_method'].lower() == 'intel' %}selected{% endif %}>Intel ({{text['lmao']}})</option>
                    <option value="None" {% if config['settings']['gpu_method'].lower() == 'none' %}selected{% endif %}> {{text['none']}} </option>
                  </select>
                </div>

                <div class="setting optimized-usage-display">
                  <p> {{text['optimized_usage_display']}} </p>
                  <label for="optimized-usage-display" class="switch">
                    <input class="{{black_theme}}" type="checkbox" id="optimized-usage-display" name="settings.optimized-usage-display" {% if config['settings']['optimized-usage-display'].lower() == 'true'%}checked{% endif %}>
                    <span class="slider round"></span>
                  </label>
                </div>

                <div class="setting open-settings-in-integrated-browser">
                  <p> {{text['open_settings_in_integrated_browser']}} </p>
                  <label for="open-settings-in-integrated-browser" class="switch">
                    <input class="{{black_theme}}" type="checkbox" id="open-settings-in-integrated-browser" name="settings.open-settings-in-integrated-browser" {% if config['settings']['open-settings-in-integrated-browser'].lower() == 'true'%}checked{% endif %}>
                    <span class="slider round"></span>
                  </label>
                </div>
                
                {# <div class="setting data-transfer-method">
                  <label for="data-transfer-method">Data transfer method</label>
                  <select id="data-transfer-method" name="settings.data-transfer-method">
                    <option value="http" {% if config['settings']['data-transfer-method'].lower() == 'http' %}selected{% endif %}>http</option>
                    <option value="socket" {% if config['settings']['data-transfer-method'].lower() == 'socket' %}selected{% endif %}>socket</option>
                  </select>
                </div> #}

                <div class="setting show-console">
                  <p> {{text['show_console']}} </p>
                  <label for="show-console" class="switch">
                    <input class="{{black_theme}}" type="checkbox" id="show-console" name="settings.show-console" {% if config['settings']['show-console'].lower() == 'true'%}checked{% endif %}>
                    <span class="slider round"></span>
                  </label>
                </div>
                
                <div class="setting automatic-firewall-bypass">
                  <button type="button" onclick="send_data('/bypass-windows-firewall')" class="button" id="authorize-windows-firewall">
                    {{text['authorize_windows_firewall']}}
                  </button>
                  <p> {{text['automatic_firewall_bypass']}} </p>
                  <label for="automatic-firewall-bypass" class="switch">
                    <input class="{{black_theme}}" type="checkbox" id="automatic-firewall-bypass" name="settings.automatic-firewall-bypass" {% if config['settings']['automatic-firewall-bypass'].lower() == 'true'%}checked{% endif %}>
                    <span class="slider round"></span>
                  </label>
                </div>

                <div class="setting fix-stop-soundboard">
                  <p> {{text['fix_stop_soundboard']}} </p>
                  <label for="fix-stop-soundboard" class="switch">
                    <input class="{{black_theme}}" type="checkbox" id="fix-stop-soundboard" name="settings.fix-stop-soundboard" {% if config['settings']['fix-stop-soundboard'].lower() == 'true'%}checked{% endif %}>
                    <span class="slider round"></span>
                  </label>
                </div>
                
                <div class="setting dev-mode">
                  <p> {{text['dev_mode']}} </p>
                  <label for="dev-mode" class="switch">
                    <input class="{{black_theme}}" type="checkbox" id="dev-mode" name="settings.dev-mode" {% if config['settings']['dev-mode'].lower() == 'true'%}checked{% endif %}>
                    <span class="slider round"></span>
                  </label>
                </div>
              </div>
              
              <input type="submit" value="{{text['save']}}" class="modal-button save-config {{black_theme}}">
            </form>
          </div>
          
        </div>

      </div>
    </div>


    <div class="addbutton-modal-container {{black_theme}}">
      <div class="addbutton-modal-content {{black_theme}}" id="addbutton-modal-content">

        <div class="addbutton-modal-header bold">
          <h1 class="addbutton-modal"> {{ text['add_a_button'] }} </h1>
          <div class="addbutton-modal-close">
            <svg class="addbutton-config-modal {{black_theme}}" xmlns="http://www.w3.org/2000/svg" width="19" height="19" fill="currentColor" class="bi bi-x-circle-fill" viewBox="0 0 16 16">
              <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z"/>
            </svg>
          </div>
        </div>

        <div class="addbutton-modal-main">
          <br class="addbutton-container {{black_theme}}">

            
            <div class="all-commands {{black_theme}}">
              {% for category, category_value in commands.items() %}
                {% set category_name = category %}
                {% if category_value['CATEGORY-SETTINGS'] %}
                  {% if category_value['CATEGORY-SETTINGS']["NAME"] %}
                    {% if category_value['CATEGORY-SETTINGS']["NAME"][language] %}
                      {% set category_name = category_value['CATEGORY-SETTINGS']["NAME"][language] %}
                    {% elif category_value['CATEGORY-SETTINGS']["NAME"]["en"] %}
                      {% set category_name = category_value['CATEGORY-SETTINGS']["NAME"]["en"] %}
                    {% elif category_value['CATEGORY-SETTINGS']["NAME"][0] %}
                      {% set category_name = category_value['CATEGORY-SETTINGS']["NAME"][0] %}
                    {% endif %}
                  {% endif %}
                {% endif %}

                <button class="dropdown-btn {{black_theme}}" dropdown-category="{{category_name}}">{{category_name}}</button>
                <div class="dropdown-container">
                  {% set arg_modal_ID1 = loop.index0 %}
                  {% for command, command_value in category_value.items() %}
                    {% if not command == "CATEGORY-SETTINGS" %}
                      {% set arg_modal_ID = str(arg_modal_ID1) + "X" + str(loop.index0) %}
                      {# {{ mdebug(command) }} #}
                      <div class="dropdown-item-container">
                        {% set command_name = command %}
                        {% if command_value["name"] %}
                          {% if command_value["name"][language] %}
                            {% set command_name = command_value["name"][language] %}
                          {% elif command_value["name"]["en"] %}
                            {% set command_name = command_value["name"]["en"] %}
                          {% elif command_value["name"][0] %}
                            {% set command_name = command_value["name"][0] %}
                          {% endif %}
                        {% endif %}
                        {% set command_desc = "" %}
                        {% if command_value["description"] %}
                          {% if command_value["description"][language] %}
                            {% set command_desc = command_value["description"][language] %}
                          {% elif command_value["description"]["en"] %}
                            {% set command_desc = command_value["description"]["en"] %}
                          {% elif command_value["description"][0] %}
                            {% set command_desc = command_value["description"][0] %}
                          {% endif %}
                        {% endif %}
                        {% set command_id = command_value["command"] %}

                        {% if command_value["description"] %}
                          <div class="addbutton-description">
                            <p>{{command_desc}}</p>
                          </div>
                        {% endif %}

                        {% if not command_value["TYPE"] == "multiple" %}
                          
                          {# <button arg_modal_ID="{{ arg_modal_ID }}" class="dropdown-btn no-dropdown" id="open-button-{{ arg_modal_ID }}" dropdown-commandTag="{{command}}" onclick="argsInput('commands[\'{{category}}\'][\'{{command}}\']')" > {{command_name}} </button> #}
                          <button arg_modal_ID="{{ arg_modal_ID }}" class="dropdown-btn no-dropdown {{black_theme}}" id="open-button-{{ arg_modal_ID }}" dropdown-commandTag="{{command}}"> {{command_name}} </button>
                        
                          {% include 'addbutton_modal.jinja' %}

                        {% else %}
                          {# si type = multiple #}

                          {% if command_value["name"] %}
                            {% if command_value["name"][language] %}
                              {% set command = command_value["name"][language] %}
                            {% elif command_value["name"]["en"] %}
                              {% set command = command_value["name"]["en"] %}
                            {% elif command_value["name"][0] %}
                              {% set command = command_value["name"][0] %}
                            {% endif %}
                          {% endif %}
                          {% set command_values = command_value["commands"] %}
                          <button class="dropdown-btn {{black_theme}}" dropdown-category="{{command}}">{{command}}</button>
                          <div class="dropdown-container">
                            <div class="dropdown-item-container">
                              {% for command_value in command_values %}
                                {% set arg_modal_ID = str(arg_modal_ID) + "X" + str(loop.index0) %}
                                {% set command = command_value["command"].replace('/','') %}
                                {# {{ mdebug(command) }} #}
                                {% set command_name = command %}
                                {% if command_value["name"] %}
                                  {% if command_value["name"][language] %}
                                    {% set command_name = command_value["name"][language] %}
                                  {% elif command_value["name"]["en"] %}
                                    {% set command_name = command_value["name"]["en"] %}
                                  {% elif command_value["name"][0] %}
                                    {% set command_name = command_value["name"][0] %}
                                  {% endif %}
                                {% endif %}
                                {% set command_desc = "" %}
                                {% if command_value["description"] %}
                                  {% if command_value["description"][language] %}
                                    {% set command_desc = command_value["description"][language] %}
                                  {% elif command_value["description"]["en"] %}
                                    {% set command_desc = command_value["description"]["en"] %}
                                  {% elif command_value["description"][0] %}
                                    {% set command_desc = command_value["description"][0] %}
                                  {% endif %}
                                {% endif %}
                                {% set command_id = command_value["command"] %}
                                {% if command_value["description"] %}
                                  <div class="addbutton-description">
                                    <p>{{command_desc}}</p>
                                  </div>
                                {% endif %}
                                
                                <button arg_modal_ID="{{ arg_modal_ID }}" class="dropdown-btn no-dropdown {{black_theme}}" id="open-button-{{ arg_modal_ID }}" dropdown-commandTag="{{command}}"> {{command_name}} </button>
                                
                                {% include 'addbutton_modal.jinja' %}
                              {% endfor %}
                            </div>
                          </div>
                        {% endif %}
                      </div>
                    {% endif %}
                  {% endfor %}
                </div>
              {% endfor %}


            <script>
              // dropdown dans add a button

              var dropdown = document.getElementsByClassName("dropdown-btn");
              var i;

              for (let i = 0; i < dropdown.length; i++) {
                (function(index) {
                  dropdown[index].addEventListener("click", function() {
                    if (!(dropdown[index].classList.contains("final-btn") || dropdown[index].classList.contains("no-dropdown"))) {
                      this.classList.toggle("active");
                    }
                    var dropdownContent = this.nextElementSibling;
                    try {
                      if (dropdownContent.style.display === "block") {
                        if (!dropdownContent.classList.contains("addbutton-description")) {
                          dropdownContent.style.display = "none";
                        }
                      } else {
                        dropdownContent.style.display = "block";
                      }
                    } catch (error) {
                      // Ne rien faire (pass)
                    }
                  });
                })(i);
              }
              
            </script>

          </div>
        </div>
      </div>
    </div>


    {% if config['settings']['data-transfer-method'] == 'socket' %}
      <script src="static/js/socketio.js"></script>
      {# <script src="https://cdn.socket.io/4.3.2/socket.io.esm.min.js"></script> #}
    {% endif %}

    <script type="text/javascript">

      if (window.location !== window.parent.location) {
          console.log("La page est chargée dans un iframe.");
          var goFullscreen = window.parent.goFullscreenIFRAME;
      } else {
          console.log("La page n'est pas chargée dans un iframe.");
          function goFullscreen() {
            var element = document.documentElement; // L'élément à mettre en mode plein écran
          
            if (element.requestFullscreen) {
              element.requestFullscreen();
            } else if (element.webkitRequestFullscreen) { /* Safari */
              element.webkitRequestFullscreen();
            } else if (element.msRequestFullscreen) { /* IE11 */
              element.msRequestFullscreen();
            }
          }
      }

      function folder(folder_id) {
        var elements = document.querySelectorAll('.buttons-center');

        // Parcourt chaque élément
        elements.forEach(function(element) {
          if (!element.classList.contains('invisible')) {
            element.classList.add('invisible');
          }
        });

        var folderElement = document.getElementById('folder-' + folder_id);
        if (folderElement.classList.contains('invisible')) {
          folderElement.classList.remove('invisible');
        } else {
          folderElement.classList.add('invisible');
        }
      }


      function togglePasswordVisibility(id, iconid) {
        var passwordInput = document.getElementById(id);
        var showPasswordIcon = document.getElementById(iconid);
      
        if (passwordInput.type === "password") {
          passwordInput.type = "text";
          showPasswordIcon.classList.add("active");
        } else {
          passwordInput.type = "password";
          showPasswordIcon.classList.remove("active");
        }
      }

      // Empêcher la mise en veille de l'écran lorsque l'utilisateur est inactif
      const wakeLock = async () => {
        try {
          const wakeLock = await navigator.wakeLock.request('screen');
          
          // wakeLock.release();
        } catch (err) {}
      };
      // Appeler la fonction pour activer le verrouillage de l'écran lorsque l'utilisateur interagit avec le site
      document.addEventListener('click', wakeLock);

      function showToast(type, text) {
        let bg, duration
        if (type === 0) {
          bg = "linear-gradient(to right, #dc4e74, #c93d3d)";
          duration = 2000
        } else {
          duration = 3000
          bg = "linear-gradient(to right, #00b07d, #96c93d)";
        }
        Toastify({
          text: text,
          duration: duration,
          newWindow: true,
          close: true,
          gravity: "top",
          stopOnFocus: true,
          style: {
            background: bg,
          }
        }).showToast();
      }

      function showError(text) {
        showToast(0, text)
        console.log('ERROR: ', text);
      }
      function showInfo(text) {
        showToast(1, text)
        console.log('INFO: ', text);
      }

      function send_data(message) {
        fetch('/send-data', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ message: message })
        })
          .then(response => response.json())
          .then(data => {
            if (data.success === false) {
              showError(data.message);
            } else {
              console.log(data);
            }
          })
          .catch(error => console.error(error));
      }

      {#
      function loop() {
        {% if config['settings']['data-transfer-method'] == 'socket' %}
          socket.emit('message_from_socket', 'loop');
        {% else %}
          fetch('/send-data', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ message: 'loop' })
          })
            .then(response => response.json())
            .then(data => {
                      if (data.success === false) {
                        showError(data.message);
                      } else {
                        console.log(data);
                      }
                    })
            .catch(error => console.error(error));
        {% endif %}
      }
      setInterval(loop, 5000); #}

      var disconnectCount = 0

      var config = {};
      var tempEditorConfig = {};

      async function get_config() {
        try {
          const response = await fetch('/get_config');
          if (!response.ok) {
            throw new Error(`{{text["settings_load_error"]}}`);
          }
          const configData = await response.json();
          console.log(configData); // Log the config data if needed
          return configData;
        } catch (error) {
          console.error(error);
          throw error; // Rethrow the error if needed
        }
      }

      async function loadConfig() {
        try {
          const config = await get_config();
          return config;
        } catch (error) {
          return null;
        }
      }


      function auto_resize() {
        var divs = document.querySelectorAll('.buttons-center');
        for (var i = 0; i < divs.length; i++) {
            if (!divs[i].classList.contains('invisible')) {
                var div = divs[i];
                break;
            }
        }
        var currentZoom = document.body.offsetWidth / 100;

        function applyZoom(newZoom) {
          currentZoom = newZoom;
          const scalePercentage = 100 / currentZoom;
          document.body.style.transformOrigin = "left top";
          document.body.style.transform = `scale(${currentZoom})`;
          document.body.style.width = `${scalePercentage}%`;
          document.body.style.height = `${scalePercentage}%`;
        }

        var count = 0;
        while (count < 1000) {
          count ++;
          const rect = div.getBoundingClientRect();
          if (!(rect.right > window.innerWidth || rect.bottom > window.innerHeight)) {
            currentZoom += 0.05;
            applyZoom(currentZoom);
          } else {
            count = 1000;
            break;
          }
        }

        count = 0;
        while (count < 1000) {
          count ++;
          const rect = div.getBoundingClientRect();
          if (rect.right > window.innerWidth || rect.bottom > window.innerHeight) {
            currentZoom -= 0.05;
            applyZoom(currentZoom);
          } else {
            count = 1000;
            break;
          }
        }
      }


      window.addEventListener('load', function() {
        folder('{{str(config["front"]["buttons"].keys()).split("'")[1]}}');
        auto_resize();

        const usageValueDivs = document.querySelectorAll('.usage-value');
        if (usageValueDivs.length > 0) {
          setInterval(function() {
            // Récupérer tous les formulaires avec un champ input qui commence par "/usage" et contient "cpu usage_percent"
            var forms = document.querySelectorAll('form');
            const messages = [];

            // Récupérer les messages de chaque formulaire
            forms.forEach(form => {
              const messageElement = form.querySelector('.message');
              if (messageElement) {
                const message = messageElement.value;
                messages.push({ form: form, message: message });
              }
            });


            // Effectuer une requête fetch pour tous les messages et mettre à jour les éléments DOM correspondants
            try {
              fetch('/usage', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ messages: messages })
              })
                .then(response => response.json())
                .then(usage_dict => {
                  if (disconnectCount > 0) {
                    var loadingScreen = document.getElementById("loading-screen");
                    loadingScreen.classList.add("hidden");
                    disconnectCount = 0;
                  }
                  // console.log(usage_dict);
                  forms.forEach(form => {
                    const divElements = document.querySelectorAll('.usage-value');
                    divElements.forEach(divElement => {
                      const otherClass = divElement.classList[1];
                      if (otherClass !== undefined && otherClass.includes('.')) {
                        if (eval(otherClass) !== '-') {
                          try {
                            let newValue;
                            if (otherClass.includes('percent')) {
                              newValue = eval(otherClass) + '%';
                            } else if (otherClass.includes('_gb')) {
                              newValue = eval(otherClass) + ' gb';
                            } else if (otherClass.includes('_mb')) {
                              newValue = eval(otherClass) + ' mb';
                            } else if (otherClass.includes('bytes')) {
                              newValue = eval(otherClass) + ' bytes';
                            } else {
                              newValue = eval(otherClass);
                            }
                            if (!newValue.includes('undefined')) {
                              divElement.textContent = newValue;
                            }
                          } catch (error) {
                            return;
                          }
                        }
                      }
                    });
                  });
                })
                .catch(function (error) {
                  disconnectCount ++;

                  if (disconnectCount > 3) {
                    var loadingScreen = document.getElementById("loading-screen");
                    loadingScreen.classList.remove("hidden");
                  }
                });
            } catch (e) {
              console.log(e.message);
            }
          }, {{ config['front']['computer-usage-reload-time'] }} );
        }
      });

      document.addEventListener("DOMContentLoaded", function() {

        fetch('/get_config')
          .then(function (response) {
            var tempEditorConfig = {};
            if (response.ok) {
              return response.json();
            } else {
              throw new Error(`{{text["settings_load_error"]}}`);
            }
          })
          .then(function (configData) {
            // Utilisez les données de configuration retournées
            tempEditorConfig = configData; // Stocker les données JSON dans la variable "configData"
          })
          .catch(function (error) {
            console.error(error);
          });

        const videos = document.querySelectorAll('video');

        videos.forEach(video => {
          video.addEventListener('loadedmetadata', () => {
            // When metadata is loaded, set the time of other videos to 0
            const currentTime = video.currentTime;
            videos.forEach(otherVideo => {
              if (otherVideo !== video) {
                otherVideo.currentTime = 0;
              }
            });
          });
        });

        // =========== EDITORMODE ======== START
        var buttons = document.querySelectorAll('.createbutton_submit');
        
        buttons.forEach(function(button) {
            button.addEventListener('click', function() {
                fetch('/save_buttons_only', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(tempEditorConfig)
                })
                .then(function(response) {
                    if (response.ok) {
                        return response.json();
                    } else {
                        throw new Error(`{{text["settings_save_error"]}}`);
                    }
                })
                .then(function(response) {
                    if (response.success) {
                        console.log(`{{text["settings_save_success"]}}`);
                    } else {
                        console.log(`{{text["settings_save_error"]}}`);
                    }
                })
                .catch(function(error) {
                    console.log(error.message);
                });
            });
        });

        var openFolderDivs = document.querySelectorAll('.swapMode-open-folder');
        var isMouseOverOpenFolder = false;
        
        for (var i = 0; i < openFolderDivs.length; i++) {
          openFolderDivs[i].addEventListener('mouseover', function() {
            isMouseOverOpenFolder = true;
          });
          openFolderDivs[i].addEventListener('mouseout', function() {
            setTimeout(function() {
              isMouseOverOpenFolder = false;
            }, 150); // 150 millisecondes = 0,15 seconde
          });
        }
        
        var forms = document.querySelectorAll('form');
        forms.forEach(form => {
            form.addEventListener('submit', function(event) {
                if (swapMode === 1) {
                    // Empêchez l'envoi du formulaire par défaut
                    event.preventDefault();
                }
            });
        });

        // Récupérer les éléments nécessaires
        const folderIndex = document.getElementById('folder-index');
        let editorMode = 0;
        let ifModif = 0;
        let swapMode = 0;
        var savedOnClicks = {};
        var swapChanges = [];
        var swapUNChanges = [];
        console.log(`swapChanges: ${swapChanges}`);
      
        // Fonction pour afficher la boîte de dialogue de confirmation d'ajout
        function showAddConfirmation(event) {
            // if (confirm("Souhaitez-vous vraiment ajouter ce bouton ?")) {
            //     // L'utilisateur a confirmé
            //     // Effectuer ici l'action d'ajout du bouton
            //     console.log("Le bouton a été ajouté.");
            //     ifModif = 1;
            // }
            console.log("The button is being added");
        }
      
        // Fonction pour afficher la boîte de dialogue de confirmation de suppression
        function showDeleteConfirmation(event) {
            if (editorMode === 1 && confirm(`{{text["button_delete_confirmation"]}}`)) {
                ifModif = 1;
                
                let closest_form = event.target.closest('form.form');
                if (closest_form === null) {
                    closest_form = event.target.closest('div.void');
                }

                const parentId = closest_form.parentNode.id.replace(/^folder-/, '');
                const formClass = closest_form.className;
                const formClassMatch = formClass.match(/form-(\d+)/);
                const formNumber = formClassMatch ? formClassMatch[1] : '';
                const formIndex = parseInt(formNumber) - 1;

                const voidDiv = document.createElement('div');
                voidDiv.classList.add('void');
                voidDiv.classList.add(`form-${formNumber}`);
                voidDiv.id = closest_form.id;
                const addButtonDiv = document.createElement('div');
                addButtonDiv.classList.add('add-button');
                addButtonDiv.style.display = 'flex';
                addButtonDiv.style.top = '40.3675';
                const checkboxDiv = document.createElement('div');
                checkboxDiv.classList.add('checkbox');
                checkboxDiv.style.display = 'none';
                const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
                svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
                svg.setAttribute('width', '20');
                svg.setAttribute('height', '20');
                svg.setAttribute('viewBox', '0 0 24 24');
                const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                path.setAttribute('d', 'M12 4v16m8-8H4');
                path.setAttribute('stroke', 'currentColor');
                path.setAttribute('stroke-width', '2');
                path.setAttribute('stroke-linecap', 'round');
                path.setAttribute('stroke-linejoin', 'round');
      
                svg.appendChild(path);
                addButtonDiv.appendChild(svg);
                voidDiv.appendChild(checkboxDiv);
                voidDiv.appendChild(addButtonDiv);
                
                console.log(`${parentId} > ${formNumber}`);
                
                addButtonDiv.setAttribute('add_FOLDER', parentId);
                addButtonDiv.setAttribute('add_ID', formNumber);

                if (tempEditorConfig === null || tempEditorConfig == {}) {
                  loadConfig().then((config) => {
                    var tempEditorConfig = loadConfig();
                  });
                  console.log(tempEditorConfig);
                }
                tempEditorConfig['front']['buttons'][parentId][formNumber] = {
                  "VOID": "VOID"
                };
                closest_form.parentNode.replaceChild(voidDiv, closest_form);

                console.log("The button has been removed.");
                console.log(tempEditorConfig);
                config = tempEditorConfig;

                reloadEditorEvents();

            }
        }
      
        function showEditWindow(event) {
            // ifModif = 1;
            console.log('edit pressé');
        }
      
        let swapFirstBtn = 0;
        let swapSecondBtn = 0;
        function swapButton(event) {
            if (editorMode === 1 && swapMode === 1 && !isMouseOverOpenFolder) {
                let closest_form = event.target.closest('form.form');
                if (closest_form === null) {
                    closest_form = event.target.closest('div.void');
                }
                const parentId = closest_form.parentNode.id.replace(/^folder-/, '');
                const formClass = closest_form.className;
                const formClassMatch = formClass.match(/form-(\d+)/);
                const formNumber = formClassMatch ? formClassMatch[1] : '';
                const formIndex = parseInt(formNumber) - 1;
                
                const checkbox = closest_form.querySelector('div.checkbox');
                if (swapFirstBtn === 0) {
                    // enregistrer le premier btn
                    swapFirstBtn = `${parentId};;;${formNumber}`;
                    console.log(`1: ${swapFirstBtn}\n2: ${swapSecondBtn}`);
                    if (checkbox !== null) {
                      checkbox.classList.add('checkbox-checked');
                    }
                } else if (swapSecondBtn === 0) {
                    // enregistrer le second btn si le premier est déjà enregistré
                    if (swapFirstBtn === `${parentId};;;${formNumber}`) {
                        swapFirstBtn = 0;
                        console.log(`1: ${swapFirstBtn}\n2: ${swapSecondBtn}`);
                        if (checkbox !== null) {
                          checkbox.classList.remove('checkbox-checked');
                        }
                    } else {
                        if (checkbox !== null) {
                          checkbox.classList.add('checkbox-checked');
                        }
                        swapSecondBtn = `${parentId};;;${formNumber}`;
                        if (swapFirstBtn !== 0) {
                            // both btns are selected
                            console.log("both btns are selected");
                            const [parentId1, formNumber1] = swapFirstBtn.split(";;;");
                            const [parentId2, formNumber2] = swapSecondBtn.split(";;;");
      
                            // Get the form elements
                            const form1 = document.querySelector(`#folder-${parentId1} .form-${formNumber1}`);
                            const form2 = document.querySelector(`#folder-${parentId2} .form-${formNumber2}`);
      
                            // Get the parent elements
                            const parent1 = form1.parentNode;
                            const parent2 = form2.parentNode;
      
                            // Swap the forms
                            const temp = document.createElement('div');
                            temp.innerHTML = form1.innerHTML;
                            // Copier le contenu de form2 vers form1
                            form1.innerHTML = form2.innerHTML;
                            // Copier le contenu du temporaire (contenant le contenu initial de form1) vers form2
                            form2.innerHTML = temp.innerHTML;
      
                            // refresh les boutons del et edit après déplacement
                            let editButtonElements = document.querySelectorAll('.edit-button');
                            let deleteButtonElements = document.querySelectorAll('.delete-button');
                            for (let i = 0; i < editButtonElements.length; i++) {
                                editButtonElements[i].addEventListener('click', showEditWindow);
                            }
                            for (let i = 0; i < deleteButtonElements.length; i++) {
                                deleteButtonElements[i].addEventListener('click', showDeleteConfirmation);
                            }

                            let tempValue = tempEditorConfig['front']['buttons'][parentId1][formNumber1];
                            tempEditorConfig['front']['buttons'][parentId1][formNumber1] = tempEditorConfig['front']['buttons'][parentId2][formNumber2];
                            tempEditorConfig['front']['buttons'][parentId2][formNumber2] = tempValue;

                            // Reset the variables
                            const checkboxDivs = document.querySelectorAll('div.checkbox');
                            checkboxDivs.forEach(
                              div => div.classList.remove('checkbox-checked')
                            );
                            
                            swapChanges.push(`${parentId1};;;${formNumber1} > ${parentId2};;;${formNumber2}`);
                            console.log(`swapChanges: ${swapChanges}`);

                            swapFirstBtn = 0;
                            swapSecondBtn = 0;
                            console.log(`sucessfully swapped ${parentId1};;;${formNumber1} to ${parentId2};;;${formNumber2}`);
                            ifModif = 1;
                        }
                        console.log(`1: ${swapFirstBtn}\n2: ${swapSecondBtn}`);
                    }
                }
                else {
                    // means that both buttons are selected and the swap didnt worked
                    console.log("if you see this, it means my code is REALLY really bad. But it works, I hope.")
                }
            }
        }
      
      
      
        // Ajouter la classe CSS pour la croix lors de la modification de editorMode
        function toggleEditorMode() {
            let addButtonElements = document.querySelectorAll('.add-button');
            let editButtonElements = document.querySelectorAll('.edit-button');
            let deleteButtonElements = document.querySelectorAll('.delete-button');
            // Fonction pour gérer la visibilité des divs "add-button"
            for (let i = 0; i < addButtonElements.length; i++) {
                addButtonElements[i].style.display = editorMode === 0 ? 'none' : 'flex';
            }
            for (let i = 0; i < editButtonElements.length; i++) {
                editButtonElements[i].style.display = editorMode === 0 ? 'none' : 'flex';
            }
            for (let i = 0; i < deleteButtonElements.length; i++) {
                deleteButtonElements[i].style.display = editorMode === 0 ? 'none' : 'flex';
            }
            EditorButtons.style.display = editorMode === 0 ? 'none' : 'flex';
            EditorButtonsFolders.style.display = editorMode === 0 ? 'none' : 'block';
        }
        function hideEditorPartially() {
          let editButtonElements = document.querySelectorAll('.edit-button');
          let deleteButtonElements = document.querySelectorAll('.delete-button');
          let addButtonElements = document.querySelectorAll('.add-button');
          for (let i = 0; i < addButtonElements.length; i++) {
              addButtonElements[i].style.display = 'none'
          }
          for (let i = 0; i < editButtonElements.length; i++) {
              editButtonElements[i].style.display = 'none'
          }
          for (let i = 0; i < deleteButtonElements.length; i++) {
              deleteButtonElements[i].style.display = 'none'
          }
        }
        function showEditorPartially() {
          let editButtonElements = document.querySelectorAll('.edit-button');
          let deleteButtonElements = document.querySelectorAll('.delete-button');
          let addButtonElements = document.querySelectorAll('.add-button');
          for (let i = 0; i < addButtonElements.length; i++) {
              addButtonElements[i].style.display = 'flex'
          }
          for (let i = 0; i < editButtonElements.length; i++) {
              editButtonElements[i].style.display = 'flex'
          }
          for (let i = 0; i < deleteButtonElements.length; i++) {
              deleteButtonElements[i].style.display = 'flex'
          }
        }
      
        // Ajouter un gestionnaire d'événements pour le clic sur le bouton editorButton
        editorButton.addEventListener('click', function () {
            editorMode = editorMode === 0 ? 1 : 0;
            toggleEditorMode();
            editorButton.textContent = editorMode === 0 ? `[Q] {{text["enter_editor_mode"]}}` : `[Q] {{text["exit_editor_mode"]}}`;
            console.log('La valeur de editorMode a été modifiée :', editorMode);
            if (editorMode === 1) {
                fetch('/get_config')
                    .then(function (response) {
                        var tempEditorConfig = {};
                        if (response.ok) {
                            return response.json();
                        } else {
                            throw new Error(`{{text["settings_load_error"]}}`);
                        }
                    })
                    .then(function (configData) {
                        tempEditorConfig = configData;
                        // console.log(tempEditorConfig);
                    })
                    .catch(function (error) {
                        console.error(error);
                    });
            } else {
              if (ifModif === 1) {
                console.log(`swapChanges ${swapChanges}`);
                // while (swapChanges.length > 0) {
                //   console.log(swapChanges.length);
                //   undoSwap()
                // }
                location.reload();
              }
              editorMode = 0;
              swapMode = 0;
              showEditorPartially()
              swapEditorButton.childNodes[1].nodeValue = `[S] {{text["swap_buttons"]}}`
              swapFirstBtn = 0;
              swapSecondBtn = 0;
              swapChanges = []
              console.log(`swapChanges: ${swapChanges}`);
              toggleEditorMode();
              editorButton.textContent = editorMode === 0 ? `[Q] {{text["enter_editor_mode"]}}` : `[Q] {{text["exit_editor_mode"]}}`;
              console.log('La valeur de editorMode a été modifiée :', editorMode);
            }
        });
      
        // Ajouter un gestionnaire d'événements pour le clic sur le bouton exitEditorButton
        const exitEditorButton = document.getElementById('exitEditorButton');
        exitEditorButton.addEventListener('click', function () {
          editorMode = editorMode === 0 ? 1 : 0;
            toggleEditorMode();
            editorButton.textContent = editorMode === 0 ? `[Q] {{text["enter_editor_mode"]}}` : `[Q] {{text["exit_editor_mode"]}}`;
            console.log('La valeur de editorMode a été modifiée :', editorMode);
            if (editorMode === 1) {
              fetch('/get_config')
                .then(function (response) {
                  var tempEditorConfig = {}; // Déclarer tempEditorConfig
                  if (response.ok) {
                    return response.json();
                  } else {
                    throw new Error(`{{text["settings_load_error"]}}`);
                  }
                })
                .then(function (configData) {
                  // Utilisez les données de configuration retournées
                  tempEditorConfig = configData; // Stockez les données JSON dans la variable "configData"
                })
                .catch(function (error) {
                  // Gérez les erreurs ici
                  console.error(error);
                });
            } else {
              if (ifModif === 1) {
                console.log(`swapChanges ${swapChanges}`);
                // while (swapChanges.length > 0) {
                //   console.log(swapChanges.length);
                //   undoSwap()
                // }
                location.reload();
              }
              swapEditorButtonFunction()
              editorMode = 0;
              toggleEditorMode();
              editorButton.textContent = editorMode === 0 ? `[Q] {{text["enter_editor_mode"]}}` : `[Q] {{text["exit_editor_mode"]}}`;
              console.log('La valeur de editorMode a été modifiée :', editorMode);
            }
        });
      
        // Ajouter un gestionnaire d'événements pour le clic sur le bouton SaveExitEditorButton
        function SaveExitEditor(tempEditorConfig) {
          editorMode = 0;
          swapMode = 0;
          showEditorPartially()
          swapEditorButtonFunction()
          swapEditorButton.childNodes[1].nodeValue = `[S] {{text["swap_buttons"]}}`
          swapFirstBtn = 0;
          swapSecondBtn = 0;
          swapChanges = []
          console.log(`swapChanges: ${swapChanges}`);
          toggleEditorMode();
          if (ifModif === 1 || swapChanges.length !== 0) {
              fetch('/save_buttons_only', {
                  method: 'POST',
                  headers: {
                      'Content-Type': 'application/json'
                  },
                  body: JSON.stringify(tempEditorConfig)
              })
              .then(function(response) {
                  if (response.ok) {
                      // Le serveur a enregistré les données avec succès
                      return response.json();
                  } else {
                      // Le serveur a retourné une erreur
                      throw new Error(`{{text["settings_save_error"]}}`);
                  }
              })
              .then(function(response) {
                  if (response.success) {
                      // Le serveur a enregistré les données avec succès
                      alert(`{{text["settings_save_success"]}}`);
                      location.reload();
                  } else {
                      // Le serveur a retourné une erreur
                      showError('Error :/');
                      // alert(`{{text["settings_save_error"]}}`);
                  }
              })
              .catch(function(error) {
                  // Une erreur s'est produite
                  showError(error.message);
                  {# alert(error.message); #}
              });
          }
          console.log('La valeur de editorMode a été modifiée :', editorMode);
        }

        const SaveExitEditorButton = document.getElementById('SaveExitEditorButton');
        SaveExitEditorButton.addEventListener('click', function () {
          console.log('tempEditorConfig:');
          console.log(JSON.stringify(tempEditorConfig));
          SaveExitEditor(tempEditorConfig);
        });
        // Ajouter un gestionnaire d'événements pour le clic sur le bouton exitEditorButton
        function swapEditorButtonFunction(event) {
          swapMode = swapMode === 0 ? 1 : 0;
          const swapEditorButton = document.getElementById('swapEditorButton');
          swapEditorButton.childNodes[1].nodeValue = swapMode === 0 ? `[S] {{text["swap_buttons"]}}` : `[S] {{text["stop_swap_mode"]}}`;
          swapFirstBtn = 0;
          swapSecondBtn = 0;
          console.log('La valeur de swapMode a été modifiée :', swapMode);

          var checkboxDivs = document.querySelectorAll('div.checkbox');
          var openFolderDivs = document.querySelectorAll('.swapMode-open-folder');
          if (editorMode === 1 && swapMode === 1) {
            swapEditorButton.childNodes[1].nodeValue = `[S] {{text["stop_swap_mode"]}}`;
            hideEditorPartially()
            // afficher swapMode-open-folder
            for (var i = 0; i < openFolderDivs.length; i++) {
              openFolderDivs[i].style.display = 'inline-flex';
            }
            for (var i = 0; i < checkboxDivs.length; i++) {
              checkboxDivs[i].style.display = 'block';
            }

            // retirer le onclick
            var buttons = document.getElementsByTagName('button');
          
            for (var i = 0; i < buttons.length; i++) {
              if (!buttons[i].classList.contains('EditorButtons-Folder')) {
                var button = buttons[i];
                var onclickAttr = button.getAttribute('onclick');
                var onclickHandlerAttr = button.getAttribute('onclickhandler');
            
                // Stocker temporairement l'attribut onclick dans l'objet savedOnClicks en utilisant l'attribut onclickhandler comme clé
                if (onclickHandlerAttr) {
                  savedOnClicks[onclickHandlerAttr] = onclickAttr;
                }
            
                // Supprimer l'attribut onclick
                button.removeAttribute('onclick');
              }
            }
          } else {
            swapEditorButton.childNodes[1].nodeValue = `[S] {{text["swap_buttons"]}}`;
            swapMode = 0;
            showEditorPartially()

            var checkboxDivs = document.querySelectorAll('div.checkbox');
            var openFolderDivs = document.querySelectorAll('.swapMode-open-folder');
            // masquer swapMode-open-folder
            for (var i = 0; i < openFolderDivs.length; i++) {
              openFolderDivs[i].style.display = 'none';
            }
            // masquer checkbox
            for (var i = 0; i < checkboxDivs.length; i++) {
              checkboxDivs[i].style.display = 'none';
            }

            // Réappliquer les attributs onclick en fonction de l'emplacement du bouton
            var buttons = document.getElementsByTagName('button');
          
            for (var i = 0; i < buttons.length; i++) {
              if (!buttons[i].classList.contains('EditorButtons-Folder')) {
                var button = buttons[i];
                var onclickHandlerAttr = button.getAttribute('onclickhandler');
                var savedOnClick = savedOnClicks[onclickHandlerAttr];
            
                // Vérifier si un attribut onclick est sauvegardé pour le bouton actuel
                if (savedOnClick) {
                  // Réappliquer l'attribut onclick depuis savedOnClicks
                  button.setAttribute('onclick', savedOnClick);
                }
              }
            }
            swapChanges = []
            console.log(`swapChanges: ${swapChanges}`);
          }
        }

        function undoSwap() {
          let lastChange = swapChanges[swapChanges.length - 1];
          console.log(`All changes: ${swapChanges}`)
          console.log(`Last change: ${lastChange}`)
          
          if (lastChange === undefined) {
            showError(`{{text["no_changes_to_undo"]}}`);
          } else {
            let [swapFirstBtn, swapSecondBtn] = lastChange.split(" > ");
            const [parentId1, formNumber1] = swapFirstBtn.split(";;;");
            const [parentId2, formNumber2] = swapSecondBtn.split(";;;");
            
            // Get the form elements
            const form1 = document.querySelector(`#folder-${parentId1} .form-${formNumber1}`);
            const form2 = document.querySelector(`#folder-${parentId2} .form-${formNumber2}`);
            
            // Get the parent elements
            const parent1 = form1.parentNode;
            const parent2 = form2.parentNode;
            
            // Swap the forms
            const temp = document.createElement('div');
            temp.innerHTML = form1.innerHTML;
            // Copier le contenu de form2 vers form1
            form1.innerHTML = form2.innerHTML;
            // Copier le contenu du temporaire (contenant le contenu initial de form1) vers form2
            form2.innerHTML = temp.innerHTML;
            
            // refresh les boutons del et edit après déplacement
            let editButtonElements = document.querySelectorAll('.edit-button');
            let deleteButtonElements = document.querySelectorAll('.delete-button');
            for (let i = 0; i < editButtonElements.length; i++) {
                editButtonElements[i].addEventListener('click', showEditWindow);
            }
            for (let i = 0; i < deleteButtonElements.length; i++) {
                deleteButtonElements[i].addEventListener('click', showDeleteConfirmation);
            }
            let tempValue = tempEditorConfig['front']['buttons'][parentId1][formNumber1];
            tempEditorConfig['front']['buttons'][parentId1][formNumber1] = tempEditorConfig['front']['buttons'][parentId2][formNumber2];
            tempEditorConfig['front']['buttons'][parentId2][formNumber2] = tempValue;
            // Reset the variables
            const checkboxDivs = document.querySelectorAll('div.checkbox');
            checkboxDivs.forEach(
              div => div.classList.remove('checkbox-checked')
            );
            
            swapChanges.splice(-1)
            swapUNChanges.push(`${parentId1};;;${formNumber1} > ${parentId2};;;${formNumber2}`);

            console.log(`swapUNChanges: ${swapChanges}`);
            swapFirstBtn = 0;
            swapSecondBtn = 0;
            console.log(`sucessfully unswapped ${parentId1};;;${formNumber1} to ${parentId2};;;${formNumber2}`);
            ifModif = 1;
          }
        }

        function undoUNSwap() {
          let lastChange = swapUNChanges[swapUNChanges.length - 1];
          console.log(`All changes: ${swapUNChanges}`)
          console.log(`Last change: ${lastChange}`)
          
          if (lastChange === undefined) {
            showError(`{{text["no_changes_to_undo"]}}`);
          } else {

          

            let [swapFirstBtn, swapSecondBtn] = lastChange.split(" > ");
            const [parentId1, formNumber1] = swapFirstBtn.split(";;;");
            const [parentId2, formNumber2] = swapSecondBtn.split(";;;");
            
            // Get the form elements
            const form1 = document.querySelector(`#folder-${parentId1} .form-${formNumber1}`);
            const form2 = document.querySelector(`#folder-${parentId2} .form-${formNumber2}`);
            
            // Get the parent elements
            const parent1 = form1.parentNode;
            const parent2 = form2.parentNode;
            
            // Swap the forms
            const temp = document.createElement('div');
            temp.innerHTML = form1.innerHTML;
            // Copier le contenu de form2 vers form1
            form1.innerHTML = form2.innerHTML;
            // Copier le contenu du temporaire (contenant le contenu initial de form1) vers form2
            form2.innerHTML = temp.innerHTML;
            
            // refresh les boutons del et edit après déplacement
            let editButtonElements = document.querySelectorAll('.edit-button');
            let deleteButtonElements = document.querySelectorAll('.delete-button');
            for (let i = 0; i < editButtonElements.length; i++) {
                editButtonElements[i].addEventListener('click', showEditWindow);
            }
            for (let i = 0; i < deleteButtonElements.length; i++) {
                deleteButtonElements[i].addEventListener('click', showDeleteConfirmation);
            }
            let tempValue = tempEditorConfig['front']['buttons'][parentId1][formNumber1];
            tempEditorConfig['front']['buttons'][parentId1][formNumber1] = tempEditorConfig['front']['buttons'][parentId2][formNumber2];
            tempEditorConfig['front']['buttons'][parentId2][formNumber2] = tempValue;
            // Reset the variables
            const checkboxDivs = document.querySelectorAll('div.checkbox');
            checkboxDivs.forEach(
              div => div.classList.remove('checkbox-checked')
            );
            
            swapUNChanges.splice(-1)
            swapChanges.push(`${parentId1};;;${formNumber1} > ${parentId2};;;${formNumber2}`);

            swapFirstBtn = 0;
            swapSecondBtn = 0;
            console.log(`sucessfully unswapped ${parentId1};;;${formNumber1} to ${parentId2};;;${formNumber2}`);
            ifModif = 1;
          }
        }

        const swapEditorButton = document.getElementById('swapEditorButton');
        swapEditorButton.addEventListener('click', swapEditorButtonFunction);

        document.addEventListener('keydown', function(event) {
          if (is_editbutton_modal_opened === 0 && is_addbutton_modal_opened === 0 && document.getElementById('modal-container').style.opacity !== '1') {
            if (event.key.toLowerCase() === 'e') {
              SaveExitEditor(tempEditorConfig);
            }
            if (event.key.toLowerCase() === 'q') {
              editorMode = editorMode === 0 ? 1 : 0;
              toggleEditorMode();
              editorButton.textContent = editorMode === 0 ? `[Q] {{text["enter_editor_mode"]}}` : `[Q] {{text["exit_editor_mode"]}}`;
              console.log('La valeur de editorMode a été modifiée :', editorMode);
              if (editorMode === 1) {
                fetch('/get_config')
                  .then(function (response) {
                    var tempEditorConfig = {};
                    if (response.ok) {
                      return response.json();
                    } else {
                      throw new Error(`{{text["settings_load_error"]}}`);
                    }
                  })
                  .then(function (configData) {
                    // Utilisez les données de configuration retournées
                    tempEditorConfig = configData; // Stocker les données JSON dans la variable "configData"
                  })
                  .catch(function (error) {
                    console.error(error);
                  });
              } else {
                if (ifModif === 1) {
                  console.log(`swapChanges ${swapChanges}`);
                  // while (swapChanges.length > 0) {
                  //   console.log(swapChanges.length);
                  //   undoSwap()
                  // }
                  location.reload();
                }
                swapEditorButtonFunction();
                editorMode = 0;
                toggleEditorMode();
                editorButton.textContent = editorMode === 0 ? `[Q] {{text["enter_editor_mode"]}}` : `[Q] {{text["exit_editor_mode"]}}`;
                console.log('La valeur de editorMode a été modifiée :', editorMode);
              }
            }
            if (editorMode === 1) {
              if (event.key.toLowerCase() === 's') {
                swapEditorButtonFunction();
              }
              if (event.key.toLowerCase() === 'z' && event.ctrlKey && swapMode === 1) {
                console.log('Ctrl + Z');
                undoSwap();
              }
              if (event.ctrlKey && event.shiftKey && event.key === 'Z' && swapMode === 1) {
                console.log('Ctrl + Shift + Z');
                undoUNSwap();
              }
              if (event.key.toLowerCase() === 'y' && event.ctrlKey && swapMode === 1) {
                console.log('Ctrl + Y');
                undoUNSwap();
              }
            }
          }
          if (event.key === 'Escape') {
            hide_last_modal();
          }
          let modal = document.querySelector('.modal-container');

          // Check if focus element is a text field
          var focusedElement = document.activeElement;
          if (!(focusedElement.tagName === 'INPUT' || focusedElement.tagName === 'TEXTAREA')) {
              if (event.key.toLowerCase() === 'c' || event.key.toLowerCase() === 'm') {
                  if (is_editbutton_modal_opened === 0 && is_addbutton_modal_opened === 0) {
                      if (modal.style.opacity !== '1') {
                          show_modal();
                      } else {
                          hide_modal();
                      }
                  }
              }
          }
        });
      

        const EditorButtons = document.getElementById('EditorButtons');
        const EditorButtonsFolders = document.getElementById('EditorButtons-Folders');

        function reloadEditorEvents() {
          console.log('reloading editor events');
          let addButtonElements = document.querySelectorAll('.add-button');
          let editButtonElements = document.querySelectorAll('.edit-button');
          let deleteButtonElements = document.querySelectorAll('.delete-button');
        
          var AllButtons1 = document.querySelectorAll('form.form');
          var AllButtons2 = document.querySelectorAll('div.void');
          var AllButtons = Array.from(AllButtons1).concat(Array.from(AllButtons2));
        
          // Ajouter un gestionnaire d'événement pour le clic sur le bouton +
          for (let i = 0; i < addButtonElements.length; i++) {
              addButtonElements[i].addEventListener('click', showAddConfirmation);
          }
          // Ajouter un gestionnaire d'événement pour le clic sur le bouton edit
          for (let i = 0; i < editButtonElements.length; i++) {
              editButtonElements[i].addEventListener('click', showEditWindow);
          }
          // Ajouter un gestionnaire d'événement pour le clic sur le bouton delete
          for (let i = 0; i < deleteButtonElements.length; i++) {
              deleteButtonElements[i].addEventListener('click', showDeleteConfirmation);
          }
          // Ajouter un gestionnaire d'événement pour le clic sur le bouton swap
          for (let i = 0; i < AllButtons.length; i++) {
              AllButtons[i].addEventListener('click', swapButton);
          }

          // Ajouter un écouteur d'événement sur chaque bouton pour ouvrir la modal addbutton
          let open_modal_addbutton = document.querySelectorAll("div.add-button");
          for (let button of open_modal_addbutton) {
            button.addEventListener("click", function() {
              if (swapMode !== 1) {
                var addIdValue = button.getAttribute('add_ID');
                var addFolderValue = button.getAttribute('add_FOLDER');
                show_addbutton_modal(addFolderValue, addIdValue);
              }
            });
          }
        }

        reloadEditorEvents();

        // =========== EDITORMODE ======== END



        {% if config['settings']['data-transfer-method'] == 'socket' %}
          // SOCKET CONNECTION
          var socket = io.connect('http://' + document.domain + ':' + location.port);
        
          socket.on('connect', function() {
            console.log('Connected');
          });
        
          socket.on('json_data', function(data) {
            console.log(data.message);
          });
        {% endif %}

        var forms = document.querySelectorAll('form');
        forms.forEach(form => {
          form.addEventListener('submit', function(event) {
            event.preventDefault();
        
            if (editorMode === 1 && swapMode === 1) {
              return; // Empêche l'envoi du formulaire par défaut
            }
        
            const messageElement = form.querySelector('.message');
            if (!messageElement) {
              if (form.classList.contains('config-form')) {
                  
                console.log('sending config-form...');
          
                var config_dataTemp = {};
                var inputs = document.querySelectorAll('#config-form input, #config-form select');
                inputs.forEach(function(input) {
                  var name = input.name;
                  var value;
                  if (input.type === 'checkbox') {
                    value = input.checked ? 'true' : 'false';
                  } else {
                    value = input.value;
                    if (input.id === 'language') {
                      value = value.toLowerCase();
                    }
                  }
                  config_dataTemp[name] = value;
                });
                
          
                console.log(config_dataTemp);
          
                let config_data = {};
          
                for (let key in config_dataTemp) {
                  if (key === "") continue; // Ignorer la clé sans nom
          
                  let keys = key.split(".");
                  let obj = config_data;
          
                  for (let i = 0; i < keys.length; i++) {
                    if (!obj.hasOwnProperty(keys[i])) {
                      obj[keys[i]] = {};
                    }
          
                    if (i === keys.length - 1) {
                      obj[keys[i]] = config_dataTemp[key];
                    }
          
                    obj = obj[keys[i]];
                  }
                }
          
                console.log(config_data);
          
                fetch('/save_config', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify(config_data)
                })
                  .then(function(response) {
                    if (response.ok) {
                      return response.json();
                    } else {
                      throw new Error(`{{text["settings_save_error"]}}`);
                    }
                  })
                  .then(function(response) {
                    if (response.success) {
                      alert(`{{text["settings_save_success"]}}`);
                    } else {
                      showError('Error :/');
                      alert(`{{text["settings_save_error"]}}`);
                    }
                  })
                  .catch(function(error) {
                    showError(error.message);
                  });
              }
            } else {
              const message = messageElement.value;
              if (!message.startsWith("/usage") && !message.startsWith("/reload") && !message.startsWith("/folder")) {
                {% if config['settings']['data-transfer-method'] == 'socket' %}
                  socket.emit('message_from_socket', message);
                {% else %}
                  send_data(message);
                {% endif %}
              } else if (message.startsWith("/reload") && swapMode !== 1) {
                console.log('reloading...');
                location.reload();
              } else {
                fetch('/usage', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({ message: message })
                })
                  .then(response => response.json())
                  .then(usage_dict => {
                    const divElements = document.querySelectorAll('.usage-value');
                    divElements.forEach(divElement => {
                      const otherClass = divElement.classList[1];
                      if (otherClass !== undefined || eval(otherClass) !== '-') {
                        try {
                          let newValue;
                          if (otherClass.includes('percent')) {
                            newValue = eval(otherClass) + '%';
                          } else if (otherClass.includes('_gb')) {
                            newValue = eval(otherClass) + ' gb';
                          } else if (otherClass.includes('_mb')) {
                            newValue = eval(otherClass) + ' mb';
                          } else if (otherClass.includes('bytes')) {
                            newValue = eval(otherClass) + ' bytes';
                          } else {
                            newValue = eval(otherClass);
                          }
                          if (!newValue.includes('undefined')) {
                            divElement.textContent = newValue;
                          }
                        } catch (error) {
                          return;
                        }
                      }
                    });
                  })
                  .catch(error => console.error(error));
              }
            }
          });
        });
        

        let lastModals = [];

        // ?modal=show ?config=show
        const urlParams = new URLSearchParams(window.location.search);
        const modalParam = urlParams.get('config');
        if (modalParam === 'show' || modalParam === 'true') {
          let modal = document.querySelector('.modal-container');
          modal.style.opacity = '1';
          modal.style.display = 'block';
          lastModals.push("config-modal");
        }
        
        function hide_last_modal() {
          switch (lastModals[lastModals.length - 1]) {
            case 'config-modal':
              hide_modal();
              break;
            case 'addbutton-modal':
              hide_addbutton_modal();
              break;
            case 'addbuttonArgs-modal':
              hide_addbutton_args_modal();
              break;
            case 'editbutton-modal':
              hide_editbutton_modal();
              break;
          }
        }


        // Sélectionner tous les boutons qui ont la classe open-config-modal
        let open_modal_buttons = document.querySelectorAll(".open-config-modal");

        // Sélectionner le conteneur de la modal
        let modal = document.querySelector(".modal-container");

        // Sélectionner le bouton de fermeture de la modal
        let modal_close_button = document.querySelector(".modal-close");

        function show_modal() {
          lastModals.push("config-modal");
          modal.style.opacity = "100%";
          modal.style.display = "block";
        }
        function hide_modal() {
          lastModals.splice(lastModals.indexOf("config-modal"), 1);
          let intervalId = setInterval(function() {
            let currentOpacity = parseFloat(getComputedStyle(modal).opacity);
            if (currentOpacity <= 0) {
              // L'animation est terminée, cacher la modal
              clearInterval(intervalId);
              setTimeout(function() {
                modal.style.display = "none";
              }, 100); // Attendre avant de cacher la modal
              return;
            }
            modal.style.opacity = (currentOpacity - 3.5).toFixed(2);
          }, 10); // Répéter toutes les 0.01s (10ms)
        }

        // Ajouter un écouteur d'événement sur chaque bouton pour ouvrir la modal
        for (let button of open_modal_buttons) {
          button.addEventListener("click", function() {
            if (swapMode !== 1) {
              show_modal();
            }
          });
        }

        // Ajouter un écouteur d'événement sur le bouton de fermeture pour fermer la modal
        modal_close_button.addEventListener("click", function() {
          hide_modal();
        });

        // Ajouter un écouteur d'événement sur la modal pour la fermer en cliquant en dehors
        modal.addEventListener("click", function(event) {
          if (event.target === modal) {
            hide_modal();
          }
        });
        



        // Sélectionner tous les boutons qui ont la classe open-config-modal
        let open_modal_addbutton = document.querySelectorAll("div.add-button");

        // Sélectionner le conteneur de la modal
        let addbutton_modal = document.querySelector(".addbutton-modal-container");

        // Sélectionner le bouton de fermeture de la modal
        let addbutton_modal_close_button = document.querySelector(".addbutton-modal-close");

        let is_addbutton_modal_opened = 0;

        function show_addbutton_modal(addFolder, addId) {
          lastModals.push("addbutton-modal");
          addbutton_modal.style.opacity = "100%";
          addbutton_modal.style.display = "block";
          is_addbutton_modal_opened = 1;
          document.querySelector('#addbutton-modal-content').setAttribute('add_FOLDER', addFolder);
          document.querySelector('#addbutton-modal-content').setAttribute('add_ID', addId);
        }
        function hide_addbutton_modal() {
          lastModals.splice(lastModals.indexOf("addbutton-modal"), 1);
          document.querySelector('#addbutton-modal-content').removeAttribute('add_ID');
          document.querySelector('#addbutton-modal-content').removeAttribute('add_FOLDER');
          let intervalId = setInterval(function() {
            let currentOpacity = parseFloat(getComputedStyle(addbutton_modal).opacity);
            if (currentOpacity <= 0) {
              // L'animation est terminée, cacher la modal
              clearInterval(intervalId);
              setTimeout(function() {
                addbutton_modal.style.display = "none";
              }, 100); // Attendre avant de cacher la modal
              return;
            }
            addbutton_modal.style.opacity = (currentOpacity - 3.5).toFixed(2);
          }, 10); // Répéter toutes les 0.01s (10ms)
          is_addbutton_modal_opened = 0;
        }

        // Ajouter un écouteur d'événement sur chaque bouton pour ouvrir la modal addbutton
        for (let button of open_modal_addbutton) {
          button.addEventListener("click", function() {
            if (swapMode !== 1) {
              var addIdValue = button.getAttribute('add_ID');
              var addFolderValue = button.getAttribute('add_FOLDER');
              show_addbutton_modal(addFolderValue, addIdValue);
            }
          });
        }

        // Ajouter un écouteur d'événement sur le bouton de fermeture pour fermer la modal addbutton
        addbutton_modal_close_button.addEventListener("click", function() {
          hide_addbutton_modal();
        });

        // Ajouter un écouteur d'événement sur la modal addbutton pour la fermer en cliquant en dehors
        addbutton_modal.addEventListener("click", function(event) {
          if (event.target === addbutton_modal) {
            hide_addbutton_modal();
          }
        });



        // Sélectionner tous les boutons qui ont la classe open-config-modal
        let open_modal_addbutton_args = document.querySelectorAll("button.no-dropdown");
        
        // Sélectionner le conteneur de chaque modal
        let addbutton_args_modal_containers = document.querySelectorAll(".addbutton-modal-container-args");
        let addbutton_args_modal = addbutton_args_modal_containers
        
        // Sélectionner le bouton de fermeture de la modal
        let addbutton_args_modal_close_buttons = document.querySelectorAll(".addbutton-modal-close-args");
        

        function show_addbutton_args_modal(modalId) {
          lastModals.push("addbuttonArgs-modal");
          let modal = document.getElementById("modal-container-" + modalId);
          if (modal) {
            modal.style.opacity = "100%";
            modal.style.display = "block";
            is_addbutton_args_modal_opened = 1;
          }
        }
        
        function hide_addbutton_args_modal() {
          lastModals.splice(lastModals.indexOf("addbuttonArgs-modal"), 1);
          let intervalId = setInterval(function() {
            let currentOpacity = parseFloat(getComputedStyle(addbutton_args_modal[0]).opacity);
            if (currentOpacity <= 0) {
              // L'animation est terminée, cacher la modal
              clearInterval(intervalId);
              setTimeout(function() {
                for (let element of addbutton_args_modal) {
                  let modalId = element.getAttribute("arg_modal_ID");
                  let modal = document.getElementById("modal-container-" + modalId);
                  if (modal) {
                    element.style.display = "none";
                  }
                }
              }, 100); // Attendre avant de cacher la modal
                return;
              }
              for (let element of addbutton_args_modal) {
                element.style.opacity = (currentOpacity - 3.5).toFixed(2);
              }
            }, 10); // Répéter toutes les 0.01s (10ms)
          is_addbutton_args_modal_opened = 0;
        }
        
        // Ajouter des écouteurs d'événements sur chaque bouton pour ouvrir la modal correspondante
        open_modal_addbutton_args.forEach(function(button) {
          button.addEventListener("click", function() {
            let modalId = button.getAttribute("arg_modal_ID");
            if (swapMode !== 1) {
              show_addbutton_args_modal(modalId);
            }
          });
        });
        
        
        // Ajouter des écouteurs d'événements sur chaque modal pour la fermer en cliquant en dehors
        addbutton_args_modal_containers.forEach(function(modalContainer) {
          let modalId = modalContainer.getAttribute("id").split("-").pop();
        
          // Ajouter un événement de clic à la div modal-container
          modalContainer.addEventListener("click", function(event) {
            if (event.target === modalContainer) {
              hide_addbutton_args_modal();
            }
          });
        });
        
        // Ajouter des écouteurs d'événements sur chaque bouton de fermeture
        addbutton_args_modal_close_buttons.forEach(function(close_button) {
          close_button.addEventListener("click", function() {
            hide_addbutton_args_modal();
          });
        });




        // Initialize a variable to keep track of the opened modal
        let is_editbutton_modal_opened = 0;
        
        // Select all buttons that have the class "edit-button"
        const open_modal_editbutton = document.querySelectorAll(".edit-button");
        
        // Select all modal containers
        const editbutton_modal_containers = document.querySelectorAll(".editbutton-modal-container");
        
        function show_editbutton_modal(modalId) {
          lastModals.push("editbutton-modal");
          const modal = document.getElementById("edit-modal-container-" + modalId);
          if (modal) {
            modal.style.opacity = "100%";
            modal.style.display = "block";
            is_editbutton_modal_opened = 1;
          }
        }
        
        function hide_editbutton_modal(modalId) {
          lastModals.splice(lastModals.indexOf("editbutton-modal"), 1);
          const editbutton_modal = document.getElementById("edit-modal-container-" + modalId);
          if (editbutton_modal) {
            let intervalId = setInterval(function() {
              let currentOpacity = parseFloat(getComputedStyle(editbutton_modal).opacity);
              if (currentOpacity <= 0) {
                // L'animation est terminée, cacher la modal
                clearInterval(intervalId);
                setTimeout(function() {
                  editbutton_modal.style.display = "none";
                }, 100); // Attendre avant de cacher la modal
                  return;
                }
                editbutton_modal.style.opacity = (currentOpacity - 3.5).toFixed(2);
              }, 10); // Répéter toutes les 0.01s (10ms)
            is_editbutton_modal_opened = 0;
          }
        }

        // Add event listeners to each button to open the corresponding modal
        open_modal_editbutton.forEach(function (button) {
          button.addEventListener("click", function () {
            if (is_editbutton_modal_opened === 0) {
              const modalId = button.getAttribute("edit_modal_id");
              show_editbutton_modal(modalId);
            }
          });
        });
        
        // Add event listeners to each modal container to close the modal when clicked outside
        editbutton_modal_containers.forEach(function (modalContainer) {
          const modalId = modalContainer.getAttribute("edit_modal_id");
        
          modalContainer.addEventListener("click", function (event) {
            if (event.target === modalContainer) {
              hide_editbutton_modal(modalId);
            }
          });
        });
        
        // Add event listeners to each close button
        const editbutton_modal_close_buttons = document.querySelectorAll(".editbutton-modal-close");
        editbutton_modal_close_buttons.forEach(function (close_button) {
          close_button.addEventListener("click", function () {
            const modalId = close_button.closest(".editbutton-modal-container").getAttribute("edit_modal_id");
            hide_editbutton_modal(modalId);
          });
        });
        




        // fullscreen
        
        const fullscreenBtn = document.querySelector('.fullscreen-btn');
        const zoomInBtn = document.querySelector('.zoom-in-btn');
        const zoomOutBtn = document.querySelector('.zoom-out-btn');
        const buttonsCenter = document.querySelector('.buttons-center');
        const shrinkBtn = document.querySelector('.shrink-btn');
        const expandBtn = document.querySelector('.expand-btn');
        const dezoomBtn = document.querySelector('.dezoom-btn');
        const zoomBtn = document.querySelector('.zoom-btn');
        fullscreenBtn.addEventListener('click', () => {
          if (document.fullscreenEnabled && swapMode === 0 ) {
            if (document.fullscreenElement) {
              document.exitFullscreen();
            } else {
              goFullscreen()
            }
            auto_resize();
          } else {
            showError('Fullscreen is not supported on your device.');
          }
        });


        try {
          let scale = 1;
          zoomInBtn.addEventListener('click', () => {
            if (swapMode !== 1) {
              scale += 0.1;
              document.documentElement.style.transform = `scale(${scale})`;
            }
          });
        } catch (error) {}

        try {
          zoomOutBtn.addEventListener('click', () => {
            if (swapMode !== 1) {
              scale -= 0.1;
              document.documentElement.style.transform = `scale(${scale})`;
            }
          });
        } catch (error) {}

        try {
          shrinkBtn.addEventListener('click', () => {
            if (swapMode !== 1) {
              const currentMargin = parseInt(getComputedStyle(buttonsCenter).marginLeft);
              buttonsCenter.style.marginLeft = `${currentMargin + 1}px`;
              buttonsCenter.style.marginRight = `${currentMargin + 1}px`;
            }
          });
        } catch (error) {}

        try {
          expandBtn.addEventListener('click', () => {
            if (swapMode !== 1) {
              const currentMargin = parseInt(getComputedStyle(buttonsCenter).marginLeft);
              buttonsCenter.style.marginLeft = `${currentMargin - 1}px`;
              buttonsCenter.style.marginRight = `${currentMargin - 1}px`;
            }
          });
        } catch (error) {}


        const cols = '{{config["front"]["width"]}}';
        const rows = '{{config["front"]["height"]}}';

        // Convertir les parties en nombres entiers
        const maxRows = parseInt(rows);
        const maxCols = parseInt(cols);

        // Récupérer la taille d'une petite div
        const smallDiv = document.querySelector('.form-0');
        const smallDivStyles = getComputedStyle(smallDiv);
        const smallDivWidth = parseInt(smallDivStyles.width) + parseInt(smallDivStyles.paddingLeft) + parseInt(smallDivStyles.paddingRight);
        const smallDivHeight = parseInt(smallDivStyles.height) + parseInt(smallDivStyles.paddingTop) + parseInt(smallDivStyles.paddingBottom);

        // Calculer la limite de la grande div en fonction de la taille de la petite div
        const maxDivs = maxRows * maxCols;
        const maxWidth = maxCols * smallDivWidth + 10;
        const maxHeight = maxCols * smallDivHeight + 10;

        // Récupérer la grande div et modifier sa largeur avec les marges
        const bigDivs = document.querySelectorAll('[id^="folder-"].buttons-center');
        bigDivs.forEach((bigDiv) => {
          bigDiv.style.maxWidth = `${maxWidth}px`;
          bigDiv.style.maxHeight = `${maxHeight}px`;
        });

        // REDIMENTIONNER LES DIVS POUR S'AJUSTER A LA TAILLE DE L'ECRAN

        var currentZoom = 1;

        try {
          dezoomBtn.addEventListener('click', () => {
            if (swapMode !== 1) {
              currentZoom = currentZoom - 0.05;
              let calcWidth = 100 / currentZoom;
              let calcHeight = 100 / currentZoom;
              document.body.style.transformOrigin = "left top";
              document.body.style.transform = "scale(" + currentZoom + ")";
              document.body.style.width = `${calcWidth}%`;
              document.body.style.height = `${calcHeight}%`;
            }
          });
        } catch (error) {}

        try {
          zoomBtn.addEventListener('click', () => {
            if (swapMode !== 1) {
              currentZoom = currentZoom + 0.05;
              let calcWidth = 100 / currentZoom;
              let calcHeight = 100 / currentZoom;
              document.body.style.transformOrigin = "left top";
              document.body.style.transform = "scale(" + currentZoom + ")";
              document.body.style.width = `${calcWidth}%`;
              document.body.style.height = `${calcHeight}%`;
            }
          });
        } catch (error) {}

        addEventListener("resize", (event) => {});
        onresize = (event) => {
          auto_resize();
        };


      });

    </script>
    
  </body>
</html>