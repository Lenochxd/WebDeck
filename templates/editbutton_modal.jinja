<div class="editbutton-modal-container {{black_theme}}" id="edit-modal-container-{{ edit_modal_ID }}" edit_modal_ID="{{ edit_modal_ID }}">
  <div class="editbutton-modal-content {{black_theme}}">

    <div class="editbutton-modal-header bold edit-modal-container-{{ edit_modal_ID }}">
      <h1 class="editbutton-modal"> {{text['configure_your_button']}} </h1>
      <div class="editbutton-modal-close">
        <svg class="editbutton-config-modal {{black_theme}}" xmlns="http://www.w3.org/2000/svg" width="19" height="19" fill="currentColor" class="bi bi-x-circle-fill" viewBox="0 0 16 16">
          <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z"/>
        </svg>
      </div>
    </div>

    <div class="editbutton-modal-main">
      <div class="config-container {{black_theme}}">
      
        <form class="args-form" edit_modal_ID="{{ edit_modal_ID }}" novalidate>
          <!--
          <div class="args-container {{black_theme}}" edit_modal_ID="{{ edit_modal_ID }}">
            future maj
          </div>
          

          {# configuration du style: #}
        
          {% if command_value["args"]|length > 0 %}
            <div class="editorStyle-bar {{black_theme}}"></div>
          {% endif %}
          -->
          <div class="editorStyle">
            <div class="fakeform-container {{black_theme}}">
              <div class="fakeform">
                {% if button_settings %}
                  {% set fill = '' %}
                    {% if 'color' in button_settings.keys() %}
                      {% if button_settings["color"] == 'invert' %}
                        {% set fill = 'filter: invert(1)' %}
                      {% else %}
                        {% set fill = 'fill:'+ button_settings["color"] +';'+' color:'+ button_settings["color"] +';' %}
                      {% endif %}
                    {% endif %}
                  {% set class = "wd_button" %}
                  {% if button_settings["image"] == "" or not button_settings["image"] %}
                    <button type="button" id="button-element_{{edit_modal_ID}}" class="{{class}}" role="button"
                      style="overflow: hidden; overflow-y: hidden; max-height: 89.6px;
                      {% if button_settings['background-color'] %}
                        background-color: {{button_settings['background-color']}};
                        box-shadow: {{button_settings['background-color']}} 0 1px 3px 0;
                      {% endif %}
                      ">
                      <img id="button-image_{{edit_modal_ID}}" draggable="false" alt="" style="
                        width: {{ 112*(50/100) + 3}}px;">
                    </button>
                  {% else %}
                    {% if button_settings["image"].startswith('http') %}
                      {% set imagelink = button_settings["image"] %}
                    {% elif ':' in button_settings["image"] %}
                      {% set imagelink = "static/files/images/" + button_settings["image"].split('\\')[-1] %}
                    {% elif button_settings["image"].startswith('**uploaded/') %}
                      {% set imagelink = "static/files/uploaded/" + config["front"]["buttons"][folder_id][button_id]["image"].replace('**uploaded/','') %}
                    {% else %}
                      {% set imagelink = "static/files/images/" + button_settings["image"] %}
                    {% endif %}
                    
                    <button type="button" id="button-element_{{edit_modal_ID}}" class="{{class}}" role="button"
                    style="overflow: hidden; overflow-y: hidden; max-height: 89.6px;
                    {% if button_settings['background-color'] %}
                      background-color: {{button_settings['background-color']}};
                      box-shadow: {{button_settings['background-color']}} 0 1px 3px 0;
                    {% endif %}
                    ">
                      {% if isfile(imagelink) %}
                        {% if imagelink.endswith('.svg') %}
                          {{ open(imagelink).read().replace('<svg','<svg id="button-image_' + edit_modal_ID + '" style="width:' + str(112*(int(button_settings["image_size"].replace("%", "")) /100) + 3) + 'px; height:'  + str(112*(int(button_settings["image_size"].replace("%", "")) /100) + 3) + '; ' + fill + '" ') }}
                        {% else %}
                          {% set image_size = '70%' %}
                          {% if button_settings['image_size'] %}
                            {% set image_size = button_settings['image_size'] %}
                          {% endif %}
                          <img id="button-image_{{edit_modal_ID}}" src="{{ imagelink }}" draggable="false" alt="{{ imagelink }}" style="
                            width: {{ 112*(int(image_size.replace('%', '')) /100) + 3}}px;
                            {{fill}}"
                          >
                        {% endif %}
                      {% endif %}
                      
                    </button>
                  {% endif %}
                  {# {% if config["front"]["show-names"].lower() == "true" %} #}
                    {% set buttontext_style = ''%}
                    {% if config["front"]["names-color"] and not config["front"]["names-color"].strip() == "" %}
                      {% set buttontext_style = 'style="color:' + config["front"]["names-color"] + ';"'%}
                    {% endif %}
                    <p class="buttontext" id="button-text-preview_{{edit_modal_ID}}" {{buttontext_style}}>
                      {% set button_name = "" %}
                      {% if "name" in button_settings.keys() and not button_settings['name'].strip() == "" %}
                        {% if button_settings["name"] is string %}
                          {% set button_name = button_settings["name"] %}
                        {% elif button_settings["name"][language] %}
                          {% set button_name = button_settings["name"][language] %}
                        {% elif button_settings["name"]["en"] %}
                          {% set button_name = button_settings["name"]["en"] %}
                        {% elif button_settings["name"][0] %}
                          {% set button_name = button_settings["name"][0] %}
                        {% endif %}
                      {% else %}
                        {% if command_value.get("style") and command_value["style"].get("name") %}
                          {% if command_value["style"]["name"] is string %}
                            {% set button_name = command_value["style"]["name"] %}
                          {% elif command_value["style"]["name"][language] %}
                            {% set button_name = command_value["style"]["name"][language] %}
                          {% elif command_value["style"]["name"]["en"] %}
                            {% set button_name = command_value["style"]["name"]["en"] %}
                          {% elif command_value["style"]["name"][0] %}
                            {% set button_name = command_value["style"]["name"][0] %}
                          {% endif %}
                        {% endif %}
                      {% endif %}
                      {{ button_name }}
                    </p>
                  {# {% endif %} #}
                
                {% else %}
                    <button type="button" class="wd_button" role="button" style="overflow: hidden; overflow-y: hidden; max-height: 89.6px;">
                      <img id="button-image_{{edit_modal_ID}}" draggable="false" alt="" style="
                        width: {{ 112*(50/100) + 3}}px;">
                    </button>
                    
                    <p class="buttontext" id="button-text-preview_{{edit_modal_ID}}" >
                      {% set button_name = "Button name" %}
                      {{ button_name }}
                    </p>
                {% endif %}
              </div>
            </div>
            {# edit le style #}
            <div class="inputs_container">
              <label for="image-input_{{edit_modal_ID}}"> {{text['image']}}: </label>
              <input type="file" id="image-input_{{edit_modal_ID}}" class="{{black_theme}}">
              
              <div class="slider-container">
                {% set default_size = '75' %}
                {% if button_settings['image_size'] and not button_settings['image_size'].strip() == '' %}
                  {% set default_size = button_settings['image_size'].strip().replace('%','') %}
                {% endif %}
                <label for="image-size-slider_{{edit_modal_ID}}"> {{text['image_size']}}: </label>
                <input type="range" id="image-size-slider_{{edit_modal_ID}}" class="{{black_theme}}" name="image-size" min="0" max="100" value="{{default_size}}" step="1">
                <input type="number" id="image-size-value_{{edit_modal_ID}}" class="image-size-value {{black_theme}}" min="0" step="1" value="{{default_size}}">
                %
              </div>
              
              <label for="background-color-input_{{edit_modal_ID}}"> {{text['background_color']}}: </label>
              <div class="background-color-input-container">
                {% set default_bgcolor = '' %}
                {% if button_settings['background-color'] and not button_settings['background-color'].strip() == '' %}
                  {% if button_settings['background-color'].strip().startswith('#') %}
                    {% set default_bgcolor = 'value="' + button_settings['background-color'].strip() + '"' %}
                  {% else %}
                    {% set default_bgcolor = 'value="#' + button_settings['background-color'].strip() + '"' %}
                  {% endif %}
                {% endif %}
                  <input type="color" class="background-color-input {{black_theme}}" id="background-color-input_{{edit_modal_ID}}" {{default_bgcolor}}>
                  <input type="text" id="background-color-hex_{{edit_modal_ID}}" class="{{black_theme}}" placeholder="{{text['background_color_hex']}}" {{default_bgcolor}}>
              </div>
              
              <label for="button-text-input_{{edit_modal_ID}}"> {{text['button_title']}}: </label>
              {% if "name" in button_settings.keys() and not button_settings['name'].strip() == "" %}
                <input type="text" id="button-text-input_{{edit_modal_ID}}" class="{{black_theme}}" placeholder="{{ button_name }}" value="{{ button_name }}">
              {% else %}
                <input type="text" id="button-text-input_{{edit_modal_ID}}" class="{{black_theme}}" placeholder="{{ button_name }}">
              {% endif %}
            </div>
          </div>

          {% if config['settings']['dev-mode'].lower() == 'true' %}
            <div class="editorStyle-bar {{black_theme}}"></div>

            <div class="arg_container" edit_modal_ID="{{edit_modal_ID}}">
              <label for="command_{{edit_modal_ID}}"> {{text['edit_command']}} </label>
              {% set message = button_settings['message'] %}
              {% set message = message.replace('"','&quot;') %}
              <input class="{{black_theme}}" type="text" name="" id="command_{{edit_modal_ID}}" value="{{ message }}">
            </div>
          {% endif %}
          
          <input type="submit" value="{{text['save']}}" id="{{edit_modal_ID}}_submit" class="createbutton_submit {{black_theme}}" style="margin-top: 30;">
          <script type="text/javascript">
            function updateImageSize(edit_modal_ID, imageSizeSlider, imageSizeValue, imageElement, button) {
                imageSizeSlider.addEventListener('input', function () {
                    var imageSize = this.value;
                    var parsedValue = parseInt(imageSize);

                    var calculatedSize = 112 * (parsedValue / 100) + 3;
                    imageElement.style.width = calculatedSize + 'px';

                    if (imageElement.tagName === 'svg') {
                        imageElement.style.height = calculatedSize + 'px';
                        imageElement.height = calculatedSize + 'px';
                        imageElement.width = calculatedSize + 'px';
                    }

                    imageSizeValue.value = parsedValue;
                    button.image_size = `${parsedValue}%`;
                });

                imageSizeValue.addEventListener('input', function (event) {
                    var newValue = imageSizeValue.value;
                    var parsedValue = parseInt(newValue);

                    if (!isNaN(parsedValue)) {
                        imageSizeSlider.value = parsedValue;

                        var calculatedSize = 112 * (parsedValue / 100) + 3;
                        imageElement.style.width = calculatedSize + 'px';

                        if (imageElement.tagName === 'svg') {
                            imageElement.style.height = calculatedSize + 'px';
                            imageElement.height = calculatedSize + 'px';
                            imageElement.width = calculatedSize + 'px';
                        }

                        button.image_size = `${parsedValue}%`;
                    }

                    event.preventDefault();
                });

                imageSizeValue.addEventListener('keypress', function (event) {
                    var charCode = event.which ? event.which : event.keyCode;

                    if (charCode < 48 || charCode > 57) {
                        event.preventDefault();
                    }
                });
            }

            function updateButtonBackgroundColor(edit_modal_ID, buttonElement, buttonBackgroundColorInput, buttonBackgroundColorHex, button) {
                buttonBackgroundColorInput.addEventListener('input', function () {
                    var colorValue = this.value;
                    var hexValue = normalizeHexValue(colorValue);

                    buttonBackgroundColorInput.value = hexValue;
                    buttonBackgroundColorHex.value = hexValue;
                    button['background-color'] = hexValue;

                    buttonElement.style.backgroundColor = hexValue;
                    buttonElement.style.boxShadow = "0 0 5px " + hexValue;
                });

                buttonBackgroundColorHex.addEventListener('input', function () {
                    var hexValue = this.value;
                    var normalizedHexValue = normalizeHexValue(hexValue);

                    buttonBackgroundColorInput.value = normalizedHexValue;
                    buttonBackgroundColorHex.value = normalizedHexValue;
                    button['background-color'] = normalizedHexValue;

                    buttonElement.style.backgroundColor = normalizedHexValue;
                    buttonElement.style.boxShadow = "0 0 5px " + normalizedHexValue;
                });
            }

            function normalizeHexValue(value) {
                if (value.charAt(0) !== '#') {
                    value = '#' + value;
                }
                return value;
            }

            document.getElementById('image-input_{{edit_modal_ID}}').addEventListener('change', function () {
                console.log('image-input_{{edit_modal_ID}} just got changed!');

                var input_{{edit_modal_ID}} = this;
                var file = input_{{edit_modal_ID}}.files[0];
                var formData = new FormData();
                formData.append('file', file);

                var xhr = new XMLHttpRequest();
                xhr.open('POST', '/upload_file', true);

                xhr.onload = function () {
                    if (xhr.status === 200) {
                        console.log('File downloaded successfully!');
                        var element = document.getElementById('button-image_{{edit_modal_ID}}');

                        var imgElement, image_{{edit_modal_ID}}, imageSizeSlider_{{edit_modal_ID}}, imageSizeValue_{{edit_modal_ID}};
                        var filePath = 'static/files/uploaded/' + input_{{edit_modal_ID}}.files[0].name;

                        if (element.tagName.toLowerCase() === 'svg') {
                            imgElement = document.createElement('img');
                            imgElement.id = 'button-image_{{edit_modal_ID}}';
                            imgElement.draggable = false;
                            imgElement.src = filePath;
                            imgElement.style.width = '87px';
                            element.parentNode.replaceChild(imgElement, element);

                            image_{{edit_modal_ID}} = document.getElementById('button-image_{{edit_modal_ID}}');
                        } else {
                            element.src = filePath;
                            image_{{edit_modal_ID}} = document.getElementById('button-image_{{edit_modal_ID}}');
                        }

                        imageSizeSlider_{{edit_modal_ID}} = document.getElementById('image-size-slider_{{edit_modal_ID}}');
                        imageSizeValue_{{edit_modal_ID}} = document.getElementById('image-size-value_{{edit_modal_ID}}');

                        imageSizeSlider_{{edit_modal_ID}}.value = '70';
                        imageSizeValue_{{edit_modal_ID}}.value = '70';
                        image_{{edit_modal_ID}}.style.width = '81.4';

                        button_{{edit_modal_ID}}.image_size = '70';


                        updateImageSize('{{edit_modal_ID}}', imageSizeSlider_{{edit_modal_ID}}, imageSizeValue_{{edit_modal_ID}}, image_{{edit_modal_ID}}, button_{{edit_modal_ID}});


                        button_{{edit_modal_ID}}.image = "**uploaded/" + input_{{edit_modal_ID}}.files[0].name;
                    } else {
                        console.error('Failed to download file.');
                    }
                };

                xhr.send(formData);
            });

            {% if button_settings %}
                var button_{{edit_modal_ID}} = {{button_settings}};
            {% else %}
                var button_{{edit_modal_ID}} = {};
            {% endif %}
            button_{{edit_modal_ID}}.name = "{{ button_name }}";

            var image_{{edit_modal_ID}} = document.getElementById('button-image_{{edit_modal_ID}}');
            var imageSizeSlider_{{edit_modal_ID}} = document.getElementById('image-size-slider_{{edit_modal_ID}}');
            var imageSizeValue_{{edit_modal_ID}} = document.getElementById('image-size-value_{{edit_modal_ID}}');

            updateImageSize('{{edit_modal_ID}}', imageSizeSlider_{{edit_modal_ID}}, imageSizeValue_{{edit_modal_ID}}, image_{{edit_modal_ID}}, button_{{edit_modal_ID}});

            var buttonElement_{{edit_modal_ID}} = document.getElementById('button-element_{{edit_modal_ID}}');
            var buttonBackgroundColorInput_{{edit_modal_ID}} = document.getElementById('background-color-input_{{edit_modal_ID}}');
            var buttonBackgroundColorHex_{{edit_modal_ID}} = document.getElementById('background-color-hex_{{edit_modal_ID}}');

            updateButtonBackgroundColor('{{edit_modal_ID}}', buttonElement_{{edit_modal_ID}}, buttonBackgroundColorInput_{{edit_modal_ID}}, buttonBackgroundColorHex_{{edit_modal_ID}}, button_{{edit_modal_ID}});

            {% if config['settings']['dev-mode'].lower() == 'true' %}
                document.getElementById('command_{{edit_modal_ID}}').addEventListener('input', function () {
                    button_{{edit_modal_ID}}['message'] = this.value;
                });
            {% endif %}

          
            var buttonText_{{edit_modal_ID}} = document.getElementById('button-text-input_{{edit_modal_ID}}');
            var buttonPreview_{{edit_modal_ID}} = document.getElementById('button-text-preview_{{edit_modal_ID}}');
          
            buttonText_{{edit_modal_ID}}.addEventListener('input', function() {
                var text_{{edit_modal_ID}} = this.value;
                buttonPreview_{{edit_modal_ID}}.textContent = text_{{edit_modal_ID}};
                button_{{edit_modal_ID}}.name = text_{{edit_modal_ID}};
            });
            
            function buttonCommand_{{edit_modal_ID}}(editModalID_{{edit_modal_ID}}, command_{{edit_modal_ID}}, event) {
                if (editModalID_{{edit_modal_ID}} === "NONE") {
                  var commandString_{{edit_modal_ID}} = command_{{edit_modal_ID}};
                } else {
                  event.preventDefault(); // Prevent the form from submitting
          
                  try {
                    var form_{{edit_modal_ID}} = document.querySelector('form[edit_modal_ID="' + editModalID_{{edit_modal_ID}} + '"]'); // Get the form element with the specified edit_modal_ID
                    var inputs_{{edit_modal_ID}} = form_{{edit_modal_ID}}.querySelectorAll('input, select, textarea'); // Get all input, select, and textarea elements within the form
          
                    var values_{{edit_modal_ID}} = Array.from(inputs_{{edit_modal_ID}}).filter(function(input_{{edit_modal_ID}}) {
                        // Exclude inputs with "display:none" in parent's style
                        var parent_{{edit_modal_ID}} = input_{{edit_modal_ID}}.parentElement;
                        if (parent_{{edit_modal_ID}} && window.getComputedStyle(parent_{{edit_modal_ID}}).display === 'none') {
                            return false;
                        }
          
                        // Exclude inputs with "choice" class
                        if (input_{{edit_modal_ID}}.classList.contains('choice')) {
                            return false;
                        }
                        // Exclude inputs within divs with "editorStyle" class or "webdeck_foldername_div" class
                        var ancestorDivs_{{edit_modal_ID}} = input_{{edit_modal_ID}}.closest('.editorStyle, .webdeck_foldername_div');
                        if (ancestorDivs_{{edit_modal_ID}}) {
                            return false;
                        }
          
                        return true;
                    }).map(function(input_{{edit_modal_ID}}) {
                        if (input_{{edit_modal_ID}}.tagName === 'SELECT') {
                            var selectedOption_{{edit_modal_ID}} = input_{{edit_modal_ID}}.options[input_{{edit_modal_ID}}.selectedIndex]; // Get the selected option
                            return selectedOption_{{edit_modal_ID}}.value; // Extract the value of the selected option
                        } else if (input_{{edit_modal_ID}}.type === 'radio' || input_{{edit_modal_ID}}.type === 'checkbox') {
                            if (input_{{edit_modal_ID}}.checked) {
                                return input_{{edit_modal_ID}}.value; // Extract the value if the radio or checkbox is checked
                            } else {
                                return ''; // Return an empty string if the radio or checkbox is not checked
                            }
                        } else if (input_{{ edit_modal_ID }}.type === 'submit' || input_{{ edit_modal_ID }}.type === 'button') {
                          return ''; // Return an empty string for submit buttons and buttons
                        } else {
                            return input_{{ edit_modal_ID }}.value; // Extract the value from the input element
                        }
                    }).filter(function(value_{{edit_modal_ID}}) {
                        return value_{{edit_modal_ID}} !== ''; // Filter out empty values
                    });
          
                    var commandString_{{edit_modal_ID}} = command_{{edit_modal_ID}} + ' ' + values_{{edit_modal_ID}}.join(' '); // Concatenate the command and values
                    
                    // Reset the form if needed
                    // form_{{edit_modal_ID}}.reset();
                  } catch (e) {
                    var commandString_{{edit_modal_ID}} = String.raw`{{button_settings["message"]}}`
                  }
                }
          
          
                // button_{{edit_modal_ID}}.message = commandString_{{edit_modal_ID}};
          
                console.log('buttonCommand received, from: edit');

                var final_button = {
                  "location_Folder": "{{edit_modal_ID}}".replace('e','').split('X')[0],
                  "location_Id": "{{edit_modal_ID}}".replace('e','').split('X')[1],
                  "content": button_{{edit_modal_ID}}
                };
                
                fetch('/save_single_button', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify(final_button)
                })
                .then(function(response) {
                  if (response.ok) {
                    return response.json();
                  } else {
                    throw new Error(`{{text["settings_save_error"]}}`);
                  }
                })
                .then(function(response) {
                  if (response.success) {
                    alert(`{{text["settings_save_success"]}}`);
                    location.reload();
                  } else {
                    throw new Error(`{{text["settings_save_error"]}}`);
                  }
                })
                .catch(function(error) {
                  alert(error.message);
                });
                
                console.log(button_{{edit_modal_ID}});
            }
            document.getElementById('{{edit_modal_ID}}_submit').addEventListener('click', function(event) {
              setTimeout(function() {
                buttonCommand_{{edit_modal_ID}}('{{ edit_modal_ID }}', "{{command_id}}", event);
              }, 1000);
            });

          </script>
          
          
        </form>
      </div>
    </div>
  </div>
</div>