<div class="addbutton-modal-container-args {{black_theme}}" id="modal-container-{{ arg_modal_ID }}" arg_modal_ID="{{ arg_modal_ID }}">
  <div class="addbutton-modal-content-args {{black_theme}}">

    <div class="addbutton-modal-header-args bold modal-container-{{ arg_modal_ID }}">
      <h1 class="addbutton-modal-args"> {{text['configure_your_button']}}: {{command_name}}</h1>
      <div class="addbutton-modal-close-args">
        <svg class="addbutton-args-config-modal {{black_theme}}" xmlns="http://www.w3.org/2000/svg" width="19" height="19" fill="currentColor" class="bi bi-x-circle-fill" viewBox="0 0 16 16">
          <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z"/>
        </svg>
      </div>
    </div>

    <div class="addbutton-modal-main-args">
      <div class="config-container {{black_theme}}">
      
        <form class="args-form" arg_modal_ID="{{ arg_modal_ID }}" novalidate>
          
          <div class="args-container {{black_theme}}" arg_modal_ID="{{ arg_modal_ID }}">
        
            {% for arg in command_value["args"] %}
              
              {% if arg[language] %}
                {% set arg_name = arg[language] %}
              {% elif arg["en"] %}
                {% set arg_name = arg["en"] %}
              {% else %}
                {% set arg_name = "arg_name is missing!" %}
              {% endif %}
              {% if "input" in arg['TYPE'] %}
                <div class="arg_container" arg_modal_ID="{{ arg_modal_ID }}" arg_id="{{ loop.index0 }}">
                  
                  <label for="{{ arg_name }}_{{arg_modal_ID}}">{{ arg_name }}:</label>
                  {% include 'args.jinja' %}

                </div>
                {% if "webdeck_foldername" in arg['TYPE'] %}
                  <div class="webdeck_foldername_div">
                    <form id="webdeck_foldername_form" novalidate>
                      <input class="{{black_theme}}" type="text" id="folderName" name="folderName" placeholder="New folder name" >
                      <button id="submitButton" type="submit">Create folder</button>
                    </form>
                      
                    <script>
                      document.getElementById("submitButton").addEventListener("click", function(event) {
                        event.preventDefault(); // Empêche le comportement par défaut du bouton
                      
                        // Récupérer la valeur du champ "folderName"
                        var folderName = document.getElementById("folderName").value;
                        if (folderName.trim() !== '') {
                        
                          // Créer un objet JSON avec la valeur
                          var parent_folder_id = document.querySelector('.buttons-center:not(.invisible)');
                          const parent_folder = parent_folder_id.id.replace(/^folder-/, '');
              
                          var data = {
                            "name": folderName.replaceAll('"', ''),
                            "parent_folder": parent_folder
                            };
                          console.log(data)
                        
                          // Envoyer la requête POST avec les données JSON
                          fetch("/create_folder", {
                            method: "POST",
                            headers: {
                              "Content-Type": "application/json"
                            },
                            body: JSON.stringify(data)
                          })
                          .then(function(response) {
                            if (response.ok) {
                              return response.json(); // Convertir la réponse en JSON
                            } else {
                              console.log("Une erreur s'est produite lors de la création du dossier.");
                            }
                          })
                          .then(function(data) {
                            if (data && data.hasOwnProperty('success')) {
                              if (data.success) {
                                // Faire quelque chose si la valeur de "success" est True
                                console.log(`{{text["folder_created_successfully"]}}`);
              
                                // Sélectionnez toutes les divs avec la classe "webdeck_foldername_ALL"
                                var divs = document.querySelectorAll('.webdeck_foldername_ALL');
                                
                                divs.forEach(function(div) {
                                  // Créez un élément div
                                  var newDiv = document.createElement('div');
                                  newDiv.setAttribute('class', 'webdeck_foldername');
                                
                                  // Créez un élément input
                                  var input = document.createElement('input');
                                  input.setAttribute('type', 'radio');
                                  input.setAttribute('name', 'file');
                                  input.setAttribute('value', folderName);
                                  input.setAttribute('required', '');
                                
                                  // Créez un élément label
                                  var label = document.createElement('label');
                                  label.setAttribute('for', folderName);
                                  label.textContent = folderName;
                                
                                  // Ajoutez l'input et le label à la div dans l'ordre inversé
                                  newDiv.appendChild(input);
                                  newDiv.appendChild(label);
                                
                                  // Ajoutez la div nouvellement créée à la div parent
                                  div.appendChild(newDiv);
                                });
                                
                                
                              } else {
                                // Faire quelque chose si la valeur de "success" est False
                                console.log("Folder creation failed because the folder already exists.");
              
                              }
                            }
                          })
                          .catch(function(error) {
                            console.log("Erreur : " + error);
                          });
                          
                        }
                      });
                    </script>
                  </div>
                {% endif %}
              {% elif "choice" in arg['TYPE'] %}
                
                <div class="choices_ALL">
                  <label for="choice">{{text["choose_option"]}} :</label><br>
                  {% set language = text['lang_short'] %}
                  {% for choice in arg['options'] %}
                    {% if choice[language] %}
                      {% set choice_name = choice[language] %}
                    {% elif arg["en"] %}
                      {% set choice_name = choice["en"] %}
                    {% else %}
                      {% set choice_name = "choice_name is missing!" %}
                    {% endif %}

                    {% set checked = "" %}
                    {% set style = 'style="display: none;"' %}
                    {% if "checked" in choice["TYPE"] %}
                      {% set checked = "checked" %}
                      {% set style = "" %}
                    {% endif %}
                    
                    <div class="choice">
                      <input {{checked}} class="choice {{black_theme}}" type="radio" name="choice" value="{{ loop.index0 }}" onchange="showArg_{{arg_modal_ID}}('{{ loop.index0 }}')">
                      <label for="{{ choice_name }}">{{ choice_name }}</label>
                    </div>
                    
                    <div {{style}} class="arg_container" arg_modal_ID="{{ arg_modal_ID }}" arg_id="{{ loop.index0 }}">
                      {% set arg = choice %}
                      {% if "multiple" in choice["TYPE"] %}
                        {% for arg in choice["items"] %}
                          {% include 'args.jinja' %}
                        {% endfor %}
                      {% else %}
                        {% include 'args.jinja' %}
                      {% endif %}
                    </div>
                  {% endfor %}
                </div>
                <script>
                  {# const arg_options_{{arg_modal_ID}} = {{arg['options']}} #}
                  function showArg_{{arg_modal_ID}}(argId) {
                    var elements_{{arg_modal_ID}} = document.querySelectorAll('div.arg_container[arg_modal_ID="{{arg_modal_ID}}"]:not([arg_id="{{argId}}"])');
                  
                    elements_{{arg_modal_ID}}.forEach(function(element) {
                      if (element.getAttribute('arg_id') === argId) {
                        element.style.display = 'block'; // Afficher les éléments avec arg_id=argId
                      } else {
                        element.style.display = 'none'; // Cacher les autres éléments
                      }
                    });
                  }
                  
                  
                </script>
              {% elif "text" in arg['TYPE'] and arg['value'] %}
                <input class="invisible" type="text" size="10" value="{{arg['value']}}">
              {% endif %}
            {% endfor %}
          </div>
          {# configuration du style: #}
          
          {% if command_value["args"]|length > 0 %}
            <div class="editorStyle-bar {{black_theme}}"></div>
          {% endif %}
          <div class="editorStyle">
            <div class="fakeform-container {{black_theme}}">
              <div class="fakeform">
                {% if command_value["style"] %}
                  {% set fill = '' %}
                    {% if 'color' in command_value["style"].keys() %}
                      {% if command_value["style"]["color"] == 'invert' %}
                        {% set fill = 'filter: invert(1)' %}
                      {% else %}
                        {% set fill = 'fill:'+ command_value["style"]["color"] +';'+' color:'+ command_value["style"]["color"] +';' %}
                      {% endif %}
                    {% endif %}
                  {% set class = "wd_button" %}
                  {% if command_value["style"]["image"] == "" or not command_value["style"]["image"] %}
                    <button type="button" id="button-element_{{arg_modal_ID}}" class="{{class}}" role="button" style="overflow: hidden; overflow-y: hidden; max-height: 89.6px;">
                      <img id="button-image_{{arg_modal_ID}}" draggable="false" alt="" style="width: {{ 112*(50/100) + 3}}px;">
                      
                      <div class="usage">
                        <div id="usage-title_{{arg_modal_ID}}" class="usage-title" style="{{fill}}"></div>
                        <div id="usage-value_{{arg_modal_ID}}" class="usage-value" style="{{fill}}"></div>
                      </div>
                    </button>
                  {% else %}
                    {% if command_value["style"]["image"].startswith('http') %}
                      {% set imagelink = command_value["style"]["image"] %}
                    {% elif ':' in command_value["style"]["image"] %}
                      {% set imagelink = "static/files/images/" + command_value["style"]["image"].split('\\')[-1] %}
                    {% elif command_value["style"]["image"].startswith('**uploaded/') %}
                      {% set imagelink = "static/files/uploaded/" + config["front"]["buttons"][folder_id][button_id]["image"].replace('**uploaded/','') %}
                    {% else %}
                      {% set imagelink = "static/files/images/" + command_value["style"]["image"] %}
                    {% endif %}
                    
                    <button type="button" id="button-element_{{arg_modal_ID}}" class="{{class}}" role="button" style="overflow: hidden; overflow-y: hidden; max-height: 89.6px;">
                        {% if imagelink.endswith('.svg') %}
                          {{ open(imagelink).read().replace('<svg','<svg id="button-image_' + arg_modal_ID + '" style="width:' + str(112*(int(command_value["style"]["image_size"].replace("%", "")) /100) + 3) + 'px; height:'  + str(112*(int(command_value["style"]["image_size"].replace("%", "")) /100) + 3) + '; ' + fill + '" ') }}
                        {% else %}
                          <img id="button-image_{{arg_modal_ID}}" src="{{ imagelink }}" draggable="false" style="
                            width: {{ 112*(int(command_value['style']['image_size'].replace('%', '')) /100) + 3}}px;
                            {{fill}}"
                          >
                        {% endif %}
                        <div class="usage">
                          <div id="usage-title_{{arg_modal_ID}}" class="usage-title" style="{{fill}}"></div>
                          <div id="usage-value_{{arg_modal_ID}}" class="usage-value" style="{{fill}}"></div>
                        </div>
                      
                    </button>
                  {% endif %}
                  {# {% if config["front"]["show-names"].lower() == "true" %} #}
                    {% set buttontext_style = ''%}
                    {% if config["front"]["names-color"] and not config["front"]["names-color"].strip() == "" %}
                      {% set buttontext_style = 'style="color:' + config["front"]["names-color"] + ';"'%}
                    {% endif %}
                    <p class="buttontext" id="button-text-preview_{{arg_modal_ID}}" {{buttontext_style}}>
                      {% set button_name = "" %}
                      {% if command_value["style"]["name"] %}
                        {% if command_value["style"]["name"] is string %}
                          {% set button_name = command_value["style"]["name"] %}
                        {% elif command_value["style"]["name"][language] %}
                          {% set button_name = command_value["style"]["name"][language] %}
                        {% elif command_value["style"]["name"]["en"] %}
                          {% set button_name = command_value["style"]["name"]["en"] %}
                        {% elif command_value["style"]["name"][0] %}
                          {% set button_name = command_value["style"]["name"][0] %}
                        {% endif %}
                      {% endif %}
                      {{ button_name }}
                    </p>
                  {# {% endif %} #}
                
                {% else %}
                    <button type="button" class="wd_button" role="button" style="overflow: hidden; overflow-y: hidden; max-height: 89.6px;">
                      <img id="button-image_{{arg_modal_ID}}" draggable="false" alt="" style="
                        width: {{ 112*(50/100) + 3}}px;
                      ">
                    </button>
                    
                    <p class="buttontext" id="button-text-preview_{{arg_modal_ID}}" >
                      {% set button_name = "Button name" %}
                      {{ button_name }}
                    </p>
                {% endif %}
              </div>
            </div>
            {# edit le style #}
            <div class="inputs_container">
              <label for="image-input_{{arg_modal_ID}}"> {{text['image']}}: </label>
              <input type="file" id="image-input_{{arg_modal_ID}}" class="{{black_theme}}">
              
              <div class="slider-container">
                {% set default_size = '75' %}
                {% if command_value["style"] and command_value["style"]['image_size'] and not command_value["style"]['image_size'].strip() == '' %}
                  {% set default_size = command_value["style"]['image_size'].strip().replace('%','') %}
                {% endif %}
                <label for="image-size-slider_{{arg_modal_ID}}"> {{text['image_size']}}: </label>
                <input type="range" id="image-size-slider_{{arg_modal_ID}}" class="{{black_theme}}" name="image-size" min="0" max="100" value="{{default_size}}" step="1">
                <input type="number" id="image-size-value_{{arg_modal_ID}}" class="image-size-value {{black_theme}}" min="0" step="1" value="{{default_size}}">
                %
              </div>
              
              <label for="background-color-input_{{arg_modal_ID}}"> {{text['background_color']}}: </label>
              <div class="background-color-input-container">
                <input type="color" class="background-color-input {{black_theme}}" id="background-color-input_{{arg_modal_ID}}">
                <input type="text" id="background-color-hex_{{arg_modal_ID}}" class="{{black_theme}}" placeholder="{{text['background_color_hex']}}">
              </div>
              
              <label for="button-text-input_{{arg_modal_ID}}"> {{text['button_title']}}: </label>
              <input type="text" id="button-text-input_{{arg_modal_ID}}" class="{{black_theme}}" placeholder="{{ button_name }}">
            </div>
          </div>

          <div class="editorStyle-bar {{black_theme}}" style="display: none;"></div>
          
          <div class="arg_container" arg_modal_ID="{{arg_modal_ID}}" style="display: none;">
            <label for="command_{{arg_modal_ID}}">Command (experimental):</label>
            <input class="{{black_theme}}" type="text" name="" id="command_{{arg_modal_ID}}" value="{{ command_value['command'] }}" readonly>
          </div>
          
          <input type="submit" value="{{text['save']}}" id="{{arg_modal_ID}}_submit" class="createbutton_submit {{black_theme}}" style="margin-top: 30;">
          <script type="text/javascript">
              function getCommand(command, arg_modal_ID) {
                var form = document.querySelector('form[arg_modal_ID="' + arg_modal_ID + '"] .args-container'); // Get the form element with the specified arg_modal_ID
                var inputs = form.querySelectorAll('input, select, textarea'); // Get all input, select, and textarea elements within the form
                var values = Array.from(inputs).filter(function(input) {
                    // Exclude inputs with "display:none" in parent's style
                    var parent = input.parentElement;
                    if (parent && window.getComputedStyle(parent).display === 'none') {
                        return false;
                    }

                    // Exclude inputs with "choice" class
                    if (input.classList.contains('choice')) {
                        return false;
                    }
                    // Exclude inputs within divs with "editorStyle" class or "webdeck_foldername_div" class
                    var ancestorDivs = input.closest('.editorStyle, .webdeck_foldername_div');
                    if (ancestorDivs) {
                        return false;
                    }

                    return true;
                }).map(function(input) {
                    if (input.tagName === 'SELECT') {
                        var selectedOption = input.options[input.selectedIndex]; // Get the selected option
                        return selectedOption.value; // Extract the value of the selected option
                    } else if (input.type === 'radio' || input.type === 'checkbox') {
                        if (input.checked) {
                            return input.value; // Extract the value if the radio or checkbox is checked
                        } else {
                            return ''; // Return an empty string if the radio or checkbox is not checked
                        }
                    } else if (input.type === 'submit' || input.type === 'button') {
                        return ''; // Return an empty string for submit buttons and buttons
                    } else {
                        if (input.value.startsWith('/folder')) {
                          input.value = input.value.replaceAll('"', '');
                        }
                        return input.value; // Extract the value from the input element
                    }
                }).filter(function(value) {
                    return value !== ''; // Filter out empty values
                });

                var commandString = command + ' ' + values.join('<|§|>'); // Concatenate the command and values

                return commandString;
              }
              
              function updateImageSize(arg_modal_ID, imageSizeSlider, imageSizeValue, imageElement, button) {
                  imageSizeSlider.addEventListener('input', function () {
                      var imageSize = this.value;
                      var parsedValue = parseInt(imageSize);

                      var calculatedSize = 112 * (parsedValue / 100) + 3;
                      imageElement.style.width = calculatedSize + 'px';

                      if (imageElement.tagName === 'svg') {
                          imageElement.style.height = calculatedSize + 'px';
                          imageElement.height = calculatedSize + 'px';
                          imageElement.width = calculatedSize + 'px';
                      }

                      imageSizeValue.value = parsedValue;
                      button.image_size = `${parsedValue}%`;
                  });

                  imageSizeValue.addEventListener('input', function (event) {
                      var newValue = imageSizeValue.value;
                      var parsedValue = parseInt(newValue);

                      if (!isNaN(parsedValue)) {
                          imageSizeSlider.value = parsedValue;

                          var calculatedSize = 112 * (parsedValue / 100) + 3;
                          imageElement.style.width = calculatedSize + 'px';

                          if (imageElement.tagName === 'svg') {
                              imageElement.style.height = calculatedSize + 'px';
                              imageElement.height = calculatedSize + 'px';
                              imageElement.width = calculatedSize + 'px';
                          }

                          button.image_size = `${parsedValue}%`;
                      }

                      event.preventDefault();
                  });

                  imageSizeValue.addEventListener('keypress', function (event) {
                      var charCode = event.which ? event.which : event.keyCode;

                      if (charCode < 48 || charCode > 57) {
                          event.preventDefault();
                      }
                  });
              }

              function updateButtonBackgroundColor(arg_modal_ID, buttonElement, buttonBackgroundColorInput, buttonBackgroundColorHex, button) {
                  buttonBackgroundColorInput.addEventListener('input', function () {
                      var colorValue = this.value;
                      var hexValue = normalizeHexValue(colorValue);

                      buttonBackgroundColorInput.value = hexValue;
                      buttonBackgroundColorHex.value = hexValue;
                      button['background-color'] = hexValue;

                      buttonElement.style.backgroundColor = hexValue;
                      buttonElement.style.boxShadow = "0 0 5px " + hexValue;
                  });

                  buttonBackgroundColorHex.addEventListener('input', function () {
                      var hexValue = this.value;
                      var normalizedHexValue = normalizeHexValue(hexValue);

                      buttonBackgroundColorInput.value = normalizedHexValue;
                      buttonBackgroundColorHex.value = normalizedHexValue;
                      button['background-color'] = normalizedHexValue;

                      buttonElement.style.backgroundColor = normalizedHexValue;
                      buttonElement.style.boxShadow = "0 0 5px " + normalizedHexValue;
                  });
              }

              function normalizeHexValue(value) {
                  if (value.charAt(0) !== '#') {
                      value = '#' + value;
                  }
                  return value;
              }

              function reloadAddbuttonUsagePreview_{{arg_modal_ID}}() {
                var commandString_{{arg_modal_ID}} = getCommand(command_{{arg_modal_ID}}, "{{arg_modal_ID}}").replaceAll('<|§|>', '').replaceAll('[object HTMLInputElement]', '');

                let message = "/usage '"+commandString_{{arg_modal_ID}};
                let path = message.replaceAll("']['", '.').replaceAll("['", '.').replaceAll("']", '')
                path = path.substring(path.lastIndexOf("'") + 1).replaceAll(' ','');
                usageTitlePreview_{{arg_modal_ID}}.classList.add(`${path}`);
                usageValuePreview_{{arg_modal_ID}}.classList.add(`${path}`);
              }

              var usageInput_{{arg_modal_ID}} = document.getElementById('usage-title-input_{{arg_modal_ID}}');
              
              if (usageInput_{{arg_modal_ID}}) {
                var usageTitlePreview_{{arg_modal_ID}} = document.getElementById('usage-title_{{arg_modal_ID}}');
                var usageValuePreview_{{arg_modal_ID}} = document.getElementById('usage-value_{{arg_modal_ID}}');
                
                // set default text on page load
                var text_{{arg_modal_ID}} = usageInput_{{arg_modal_ID}}.value;
                usageTitlePreview_{{arg_modal_ID}}.textContent = text_{{arg_modal_ID}};
                usageValuePreview_{{arg_modal_ID}}.textContent = '-';

                usageInput_{{arg_modal_ID}}.addEventListener('input', function() {
                    var text_{{arg_modal_ID}} = this.value;
                    usageTitlePreview_{{arg_modal_ID}}.textContent = text_{{arg_modal_ID}};
                    button_{{arg_modal_ID}}.name = text_{{arg_modal_ID}};
                });

                reloadAddbuttonUsagePreview_{{arg_modal_ID}}();
                var diskLetter_{{arg_modal_ID}} = document.getElementById('disk-letter_{{arg_modal_ID}}');
                if (diskLetter_{{arg_modal_ID}}) {
                  diskLetter_{{arg_modal_ID}}.addEventListener('change', function() {
                    var element = diskLetter_{{arg_modal_ID}}
                    console.log('changed!');
                    usageValuePreview_{{arg_modal_ID}}.textContent = '-';
                    usageTitlePreview_{{arg_modal_ID}}.classList.remove(usageTitlePreview_{{arg_modal_ID}}.classList.item(1));
                    usageValuePreview_{{arg_modal_ID}}.classList.remove(usageValuePreview_{{arg_modal_ID}}.classList.item(1));
                    reloadAddbuttonUsagePreview_{{arg_modal_ID}}();
                  });
                }
              }


              document.getElementById('image-input_{{arg_modal_ID}}').addEventListener('change', function () {

                  var input_{{arg_modal_ID}} = this;
                  var file = input_{{arg_modal_ID}}.files[0];
                  var formData = new FormData();
                  formData.append('file', file);

                  var xhr = new XMLHttpRequest();
                  xhr.open('POST', '/upload_file', true);

                  xhr.onload = function () {
                      if (xhr.status === 200) {
                        console.log('File downloaded successfully!');
                        var element = document.getElementById('button-image_{{arg_modal_ID}}');

                        var imgElement, image_{{arg_modal_ID}}, imageSizeSlider_{{arg_modal_ID}}, imageSizeValue_{{arg_modal_ID}};
                        var filePath = 'static/files/uploaded/' + input_{{arg_modal_ID}}.files[0].name;

                        if (element.tagName.toLowerCase() === 'svg') {
                            imgElement = document.createElement('img');
                            imgElement.id = 'button-image_{{arg_modal_ID}}';
                            imgElement.draggable = false;
                            imgElement.src = filePath;
                            imgElement.style.width = '87px';
                            element.parentNode.replaceChild(imgElement, element);

                            image_{{arg_modal_ID}} = document.getElementById('button-image_{{arg_modal_ID}}');
                        } else {
                            element.src = filePath;
                            image_{{arg_modal_ID}} = document.getElementById('button-image_{{arg_modal_ID}}');
                        }

                        imageSizeSlider_{{arg_modal_ID}} = document.getElementById('image-size-slider_{{arg_modal_ID}}');
                        imageSizeValue_{{arg_modal_ID}} = document.getElementById('image-size-value_{{arg_modal_ID}}');

                        imageSizeSlider_{{arg_modal_ID}}.value = '70';
                        imageSizeValue_{{arg_modal_ID}}.value = '70';
                        image_{{arg_modal_ID}}.style.width = '81.4';

                        button_{{arg_modal_ID}}.image_size = '70';


                        updateImageSize('{{arg_modal_ID}}', imageSizeSlider_{{arg_modal_ID}}, imageSizeValue_{{arg_modal_ID}}, image_{{arg_modal_ID}}, button_{{arg_modal_ID}});


                        button_{{arg_modal_ID}}.image = "**uploaded/" + input_{{arg_modal_ID}}.files[0].name;
                    } else {
                        console.error('Failed to download file.');
                    }
                  };

                  xhr.send(formData);
              });

              {% if command_value["style"] %}
                  var button_{{arg_modal_ID}} = {{command_value["style"]}};
              {% else %}
                  var button_{{arg_modal_ID}} = {};
              {% endif %}
              button_{{arg_modal_ID}}.name = "{{ button_name }}";

              var image_{{arg_modal_ID}} = document.getElementById('button-image_{{arg_modal_ID}}');
              var imageSizeSlider_{{arg_modal_ID}} = document.getElementById('image-size-slider_{{arg_modal_ID}}');
              var imageSizeValue_{{arg_modal_ID}} = document.getElementById('image-size-value_{{arg_modal_ID}}');

              updateImageSize('{{arg_modal_ID}}', imageSizeSlider_{{arg_modal_ID}}, imageSizeValue_{{arg_modal_ID}}, image_{{arg_modal_ID}}, button_{{arg_modal_ID}});

              var buttonElement_{{arg_modal_ID}} = document.getElementById('button-element_{{arg_modal_ID}}');
              var buttonBackgroundColorInput_{{arg_modal_ID}} = document.getElementById('background-color-input_{{arg_modal_ID}}');
              var buttonBackgroundColorHex_{{arg_modal_ID}} = document.getElementById('background-color-hex_{{arg_modal_ID}}');

              updateButtonBackgroundColor('{{arg_modal_ID}}', buttonElement_{{arg_modal_ID}}, buttonBackgroundColorInput_{{arg_modal_ID}}, buttonBackgroundColorHex_{{arg_modal_ID}}, button_{{arg_modal_ID}});

              {% if config['settings']['dev-mode'].lower() == 'true' %}
                  document.getElementById('command_{{arg_modal_ID}}').addEventListener('input', function () {
                      button_{{arg_modal_ID}}['message'] = this.value;
                  });
              {% endif %}


          
              var buttonText_{{arg_modal_ID}} = document.getElementById('button-text-input_{{arg_modal_ID}}');
              var buttonPreview_{{arg_modal_ID}} = document.getElementById('button-text-preview_{{arg_modal_ID}}');
          
              buttonText_{{arg_modal_ID}}.addEventListener('input', function() {
                  var text_{{arg_modal_ID}} = this.value;
                  buttonPreview_{{arg_modal_ID}}.textContent = text_{{arg_modal_ID}};
                  button_{{arg_modal_ID}}.name = text_{{arg_modal_ID}};
              });

              function buttonCommand_{{arg_modal_ID}}(command_{{arg_modal_ID}}, arg_modal_ID) {
                  if ("{{arg_modal_ID}}" === "NONE") {
                      var commandString_{{arg_modal_ID}} = command_{{arg_modal_ID}};
                  } else {
                      var commandString_{{arg_modal_ID}} = getCommand(command_{{arg_modal_ID}}, arg_modal_ID);
                  }
                  console.log(commandString_{{arg_modal_ID}});
          
          
                  button_{{arg_modal_ID}}.message = commandString_{{arg_modal_ID}};
                  console.log(button_{{arg_modal_ID}});
                  console.log('buttonCommand received, from: add');
                  var element = document.querySelector('#addbutton-modal-content');
                  var location_Folder = element.getAttribute('add_FOLDER');
                  var location_Id = element.getAttribute('add_ID');
                  var tempEditorConfig = {}; // Déclarer tempEditorConfig en dehors de la première promesse
                  
                  fetch('/get_config')
                    .then(function(response) {
                      if (response.ok) {
                        return response.json();
                      } else {
                        throw new Error(`{{text["settings_load_error"]}}`);
                      }
                    })
                    .then(function(configData) {
                      tempEditorConfig = configData;
                      tempEditorConfig['front']['buttons'][location_Folder][location_Id] = button_{{arg_modal_ID}}; 
                      return fetch('/save_buttons_only', {
                        method: 'POST',
                        headers: {
                          'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(tempEditorConfig)
                      });
                    })
                    .then(function(response) {
                      if (response.ok) {
                        return response.json();
                      } else {
                        throw new Error(`{{text["settings_save_error"]}}`);
                      }
                    })
                    .then(function(response) {
                      if (response.success) {
                        alert(`{{text["settings_save_success"]}}`);
                        location.reload();
                      } else {
                        throw new Error(`{{text["settings_save_error"]}}`);
                      }
                    })
                    .catch(function(error) {
                      alert(error.message);
                      throw new Error(error);
                    });
                  
                  element.removeAttribute('add_ID');
                  element.removeAttribute('add_FOLDER');
              }


              document.getElementById('{{arg_modal_ID}}_submit').addEventListener('click', function(event) {
                  if ("{{ arg_modal_ID }}" !== "NONE") {
                    event.preventDefault();
                  }
                  setTimeout(function() {
                      buttonCommand_{{arg_modal_ID}}("{{command_id}}", "{{arg_modal_ID}}");
                  }, 1000);
              });
              
          </script>
          
          
        </form>
      </div>
    </div>
  </div>
</div>